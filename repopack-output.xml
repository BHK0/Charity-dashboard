This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-03T11:33:28.351Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
.env.example
.eslintrc.json
.gitignore
app/[customUrl]/_components/DonationForm.js
app/[customUrl]/page.js
app/actions/auth.js
app/actions/blobs.js
app/actions/dateDonations.js
app/actions/donations.js
app/actions/organizations.js
app/actions/rateLimit.js
app/actions/users.js
app/admin/_components/AdminDashboardClient.js
app/admin/_components/AnalyticsTabSkeleton.js
app/admin/_components/CreateOrgButton.js
app/admin/_components/DonationsList.js
app/admin/_components/DonationsListSkeleton.js
app/admin/_components/ExportDonationsButton.js
app/admin/_components/ExportFarmerDonationsButton.js
app/admin/_components/OrgCard.js
app/admin/_components/OrgCardSkeleton.js
app/admin/_components/Sidebar.js
app/admin/analytics/_components/AnalyticsClient.js
app/admin/analytics/page.js
app/admin/farmers/_components/FarmersManagementClient.js
app/admin/farmers/_components/FarmersManagementSkeleton.js
app/admin/farmers/analytics/_components/FarmersAnalyticsClient.js
app/admin/farmers/analytics/page.js
app/admin/farmers/page.js
app/admin/layout.js
app/admin/page.js
app/admin/users/_components/UserManagementClient.js
app/admin/users/page.js
app/api/auth/validate/route.js
app/api/revalidate/all/route.js
app/api/revalidate/path/route.js
app/api/revalidate/tag/route.js
app/api/upload/blob/route.js
app/api/upload/route.js
app/farmers/_components/DateDonationForm.js
app/farmers/page.js
app/forgot-password/page.js
app/globals.css
app/hooks/useBatchDonations.js
app/layout.js
app/login/page.js
app/page.js
app/reset-password/page.js
app/setup-password/page.js
app/utils/withAuth.js
jsconfig.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.js
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path=".env.example">
# JWT
JWT_SECRET=

# AWS Credentials
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=

# Vercel Blob
BLOB_READ_WRITE_TOKEN=

# Revalidate the cache Secret
REVALIDATE_SECRET=
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env

.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.cursorrules
</file>

<file path="app/[customUrl]/_components/DonationForm.js">
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import { createDonation } from '@/app/actions/donations';

// Helper function to translate rate limit error messages
const translateRateLimitError = (error) => {
  if (!error.includes('Too many requests')) return error;
  return `Sorry, you have exceeded the allowed number of attempts. Please try again after 5 minutes.`;
};

// Phone number validation
const validatePhoneNumber = (phone) => {
  const phoneRegex = /^05\d{8}$/;
  return phoneRegex.test(phone);
};

// Format phone number as user types
const formatPhoneNumber = (value) => {
  // Remove any non-digit characters
  const numbers = value.replace(/\D/g, '');
  
  // Ensure it starts with 05
  if (numbers.length === 0) return '';
  if (numbers.length === 1 && numbers[0] !== '0') return '0';
  if (numbers.length === 2 && numbers[0] === '0' && numbers[1] !== '5') return '05';
  
  // Format the rest of the number
  if (numbers.length <= 2) return numbers;
  return numbers.slice(0, 10);
};

export default function DonationForm({ organization }) {
  const [formData, setFormData] = useState({
    name: '',
    phoneNumber: '',
    amount: null
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  const [orgLogoSize, setOrgLogoSize] = useState({ width: 120, height: 80 });
  const [touched, setTouched] = useState({});

  // Logo size calculation effect
  useEffect(() => {
    const img = new window.Image();
    img.src = organization.logo;
    img.onload = () => {
      const aspectRatio = img.width / img.height;
      let newWidth = 120; // Reduced max width
      let newHeight = newWidth / aspectRatio;
      
      if (newHeight > 80) { // Reduced max height
        newHeight = 80;
        newWidth = newHeight * aspectRatio;
      }
      
      setOrgLogoSize({ width: Math.round(newWidth), height: Math.round(newHeight) });
    };
  }, [organization.logo]);

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.phoneNumber) {
      newErrors.phoneNumber = 'Phone number is required';
    } else if (!validatePhoneNumber(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Phone number must start with 05 and be 10 digits long';
    }

    // Only show amount error if user has interacted with amount selection
    if (touched.amount && !formData.amount) {
      newErrors.amount = 'Please select a donation amount';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Add this new function to check if form is valid for submit button
  const isFormValid = () => {
    return validatePhoneNumber(formData.phoneNumber) && formData.amount !== null;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name === 'phoneNumber') {
      setFormData(prev => ({
        ...prev,
        [name]: formatPhoneNumber(value)
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleBlur = (field) => {
    setTouched(prev => ({ ...prev, [field]: true }));
    validateForm();
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    setIsSubmitting(true);
    try {
      const orgId = organization.SK.split('#')[1];
      await createDonation(orgId, {
        name: formData.name.trim() || 'Anonymous',
        phoneNumber: formData.phoneNumber,
        amount: formData.amount
      });
      
      setFormData({ name: '', phoneNumber: '', amount: null });
      setTouched({});
      alert('Donation request received successfully!');
    } catch (error) {
      console.error('Error submitting donation:', error);
      setErrors(prev => ({
        ...prev,
        submit: translateRateLimitError(error.message)
      }));
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-6" dir="ltr">
      {/* Updated Logo Header Section with consistent spacing */}
      <div className="flex flex-col items-center mb-8">
        <div className="relative w-full flex justify-center">
          {/* Center container with fixed gap from separator */}
          <div className="relative flex items-center">
            {/* Left Logo Container */}
            <div className="w-[100px] flex justify-start"> {/* Fixed width container */}
              <div className="relative w-[65px] h-[80px]">
                <Image
                  src="/logoLong.png"
                  alt="Khair Charity"
                  fill
                  style={{ objectFit: 'contain' }}
                  priority
                />
              </div>
            </div>

            {/* Separator Line */}
            <div className="h-16 w-px bg-gray-300 mx-4" /> {/* Fixed margin */}

            {/* Right Logo Container */}
            <div className="w-[100px] flex justify-end"> {/* Fixed width container */}
              <div className="relative" style={{ width: orgLogoSize.width, height: orgLogoSize.height }}>
                <Image
                  src={organization.logo}
                  alt={organization.name}
                  fill
                  style={{ objectFit: 'contain' }}
                  priority
                />
              </div>
            </div>
          </div>
        </div>
        
        {/* Organization Name */}
        <h2 className="mt-4 text-xl font-semibold text-gray-800">{organization.name}</h2>
      </div>

      <div className="space-y-4">
        {errors.submit && (
          <div className="p-3 rounded-lg bg-red-50 text-red-700 text-sm">
            {errors.submit}
          </div>
        )}
        
        <div className="space-y-2">
          <input
            type="text"
            name="name"
            placeholder="Name (optional)"
            value={formData.name}
            onChange={handleInputChange}
            className="w-full p-3 border rounded-lg text-left transition-colors focus:border-[#998966] focus:ring-1 focus:ring-[#998966]"
          />
        </div>

        <div className="space-y-2">
          <div className="relative">
            <input
              type="tel"
              name="phoneNumber"
              placeholder="Phone Number"
              value={formData.phoneNumber}
              onChange={handleInputChange}
              onBlur={() => handleBlur('phoneNumber')}
              className={`w-full p-3 border rounded-lg text-left transition-colors ${
                errors.phoneNumber && touched.phoneNumber
                  ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                  : 'focus:border-[#998966] focus:ring-1 focus:ring-[#998966]'
              }`}
            />
            {formData.phoneNumber && (
              <span className="absolute right-3 top-1/2 -translate-y-1/2 text-sm">
                {validatePhoneNumber(formData.phoneNumber) ? (
                  <span className="text-green-600">✓ Valid number</span>
                ) : (
                  <span className="text-gray-500">
                    {10 - formData.phoneNumber.length} digits remaining
                  </span>
                )}
              </span>
            )}
          </div>
          {errors.phoneNumber && touched.phoneNumber && (
            <p className="text-sm text-red-500">{errors.phoneNumber}</p>
          )}
        </div>
        
        <div>
          <div className="grid grid-cols-3 gap-3">
            {organization.donationChoices.map((amount) => (
              <button
                key={amount}
                onClick={() => {
                  setFormData(prev => ({ ...prev, amount }));
                  setTouched(prev => ({ ...prev, amount: true }));
                }}
                className={`h-12 px-3 py-2 rounded-lg transition-colors duration-200 text-sm ${
                  formData.amount === amount 
                    ? 'bg-[#998966] text-white ring-2 ring-[#998966] shadow-lg'
                    : 'bg-gray-100 text-gray-800 hover:shadow-md border-2 border-[#998966]'
                }`}
              >
                {amount} SAR
              </button>
            ))}
          </div>
          {errors.amount && touched.amount && (
            <p className="text-sm text-red-500 mt-1">{errors.amount}</p>
          )}
        </div>
        
        <button
          onClick={handleSubmit}
          disabled={isSubmitting || !isFormValid()}
          className={`w-full p-3 rounded-xl text-white transition-all duration-200 transform bg-[#998966] ${
            isSubmitting || !isFormValid()
              ? 'opacity-50 cursor-not-allowed hover:opacity-50' 
              : 'hover:opacity-90 hover:scale-[1.02]'
          }`}
        >
          {isSubmitting ? (
            <div className="flex items-center justify-center space-x-2">
              <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z" />
              </svg>
              <span>Processing...</span>
            </div>
          ) : (
            'Donate Now'
          )}
        </button>
      </div>
    </div>
  );
}
</file>

<file path="app/[customUrl]/page.js">
import { getOrganizationByUrl } from '@/app/actions/organizations';
import DonationForm from './_components/DonationForm';

// Generate metadata for the page
export async function generateMetadata({ params }) {
  const org = await getOrganizationByUrl(params.customUrl);
  
  if (!org) {
    return {
      title: 'Page Not Found'
    };
  }

  return {
    title: `${org.name} - Khair`,
    description: `Donation page for ${org.name}`
  };
}

export default async function OrganizationPage({ params }) {
  const org = await getOrganizationByUrl(params.customUrl);
  
  if (!org) {
    return <div className="text-center p-8">Organization not found</div>;
  }

  return (
    <div className="min-h-screen p-4 bg-[#f8f7f8]">
      <DonationForm organization={org} />
    </div>
  );
}
</file>

<file path="app/actions/auth.js">
'use server'

import { SignJWT, jwtVerify } from 'jose';
import bcrypt from 'bcryptjs';
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, GetCommand, QueryCommand, UpdateCommand, DeleteCommand, PutCommand } from '@aws-sdk/lib-dynamodb';
import { cookies } from 'next/headers';
import { v4 as uuidv4 } from 'uuid';
import { SendEmailCommand, SESClient } from "@aws-sdk/client-ses";

const getDynamoDb = () => {
  const client = new DynamoDBClient({
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    },
    region: process.env.AWS_REGION,
  });

  return DynamoDBDocumentClient.from(client, {
    marshallOptions: {
      removeUndefinedValues: true,
    },
  });
};

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET);

export async function login(email, password) {
  const dynamoDb = getDynamoDb();
  const params = {
    TableName: 'CharityTable2',
    Key: {
      PK: `USER#${email}`,
      SK: `USER#${email}`,
    },
  };

  const result = await dynamoDb.send(new GetCommand(params));
  const user = result.Item;

  if (!user || !bcrypt.compareSync(password, user.passwordHash)) {
    throw new Error('Invalid email or password');
  }

  const token = await new SignJWT({ email })
    .setProtectedHeader({ alg: 'HS256' })
    .setExpirationTime('7d')
    .sign(JWT_SECRET);

  // Set cookie with more explicit options
  cookies().set({
    name: 'token',
    value: token,
    httpOnly: false, // Changed to false so client-side JS can access it
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'lax',
    maxAge: 7 * 24 * 60 * 60,
    path: '/',
  });

  return { 
    success: true,
    token 
  };
}

export async function validateToken(token) {
  try {
    // Remove any URL-safe encoding that might be present
    const cleanToken = token.replace(/%22/g, '"').replace(/^"/, '').replace(/"$/, '');
    
    const { payload } = await jwtVerify(cleanToken, JWT_SECRET);
    
    if (!payload.email || !payload.exp || payload.exp < Date.now() / 1000) {
      console.log('Token invalid or expired:', payload);
      return { 
        valid: false,
        user: null
      };
    }

    return { 
      valid: true,
      user: payload
    };
  } catch (error) {
    console.error('Token validation error:', error);
    return { 
      valid: false,
      user: null
    };
  }
}

export async function setupPassword(token, password) {
  const dynamoDb = getDynamoDb(); // Move this to the top of the function
  const hashedPassword = bcrypt.hashSync(password, 10);

  const getTokenParams = {
    TableName: 'CharityTable2',
    KeyConditionExpression: 'PK = :pk',
    ExpressionAttributeValues: {
      ':pk': `TOKEN#${token}`,
    },
  };

  const tokenResult = await dynamoDb.send(new QueryCommand(getTokenParams));

  if (!tokenResult.Items || tokenResult.Items.length === 0) {
    throw new Error('Invalid token');
  }

  const userEmail = tokenResult.Items[0].email;

  const updateParams = {
    TableName: 'CharityTable2',
    Key: {
      PK: `USER#${userEmail}`,
      SK: `USER#${userEmail}`,
    },
    UpdateExpression: 'SET passwordHash = :passwordHash',
    ExpressionAttributeValues: {
      ':passwordHash': hashedPassword,
    },
  };

  await dynamoDb.send(new UpdateCommand(updateParams));
  return { success: true };
}

const sesClient = new SESClient({ 
  region: 'eu-north-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

export async function forgotPassword(email) {
  const dynamoDb = getDynamoDb();
  const token = uuidv4();
  const expiresAt = new Date(Date.now() + 3600000).toISOString(); // 1 hour expiration

  // Check if user exists
  const userParams = {
    TableName: 'CharityTable2',
    Key: {
      PK: `USER#${email}`,
      SK: `USER#${email}`,
    },
  };

  const userResult = await dynamoDb.send(new GetCommand(userParams));
  if (!userResult.Item) {
    throw new Error('Email not registered');
  }

  // Store reset token
  const tokenParams = {
    TableName: 'CharityTable2',
    Item: {
      PK: `RESET#${token}`,
      SK: `USER#${email}`,
      email,
      expiresAt,
      createdAt: new Date().toISOString(),
    },
  };

  await dynamoDb.send(new PutCommand(tokenParams));

  // Send reset email
  const emailParams = {
    Destination: {
      ToAddresses: [email],
    },
    Message: {
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: `
            <div style="font-family: Arial, sans-serif;">
              <h2 style="color: #998966;">Password Reset</h2>
              <p>We received a request to reset your password.</p>
              <p>Please click the link below to reset your password:</p>
              <a href="https://charity-dashboard.vercel.app/reset-password?token=${token}" 
                 style="display: inline-block; padding: 10px 20px; background-color: #998966; color: white; text-decoration: none; border-radius: 5px;">
                Reset Password
              </a>
              <p>This link expires in one hour.</p>
              <p>If you did not request a password reset, you can ignore this email.</p>
            </div>
          `,
        },
      },
      Subject: {
        Charset: 'UTF-8',
        Data: 'Password Reset Request',
      },
    },
    Source: 'bhk891@gmail.com',
  };

  await sesClient.send(new SendEmailCommand(emailParams));
  return { success: true };
}

export async function resetPassword(token, newPassword) {
  const dynamoDb = getDynamoDb();
  
  // Get reset token info
  const tokenParams = {
    TableName: 'CharityTable2',
    KeyConditionExpression: 'PK = :pk',
    ExpressionAttributeValues: {
      ':pk': `RESET#${token}`,
    },
  };

  const tokenResult = await dynamoDb.send(new QueryCommand(tokenParams));
  if (!tokenResult.Items || tokenResult.Items.length === 0) {
    throw new Error('Reset link is invalid or expired');
  }

  const resetToken = tokenResult.Items[0];
  const now = new Date();
  const expiresAt = new Date(resetToken.expiresAt);

  if (now > expiresAt) {
    throw new Error('Reset link has expired');
  }

  // Update user's password
  const hashedPassword = bcrypt.hashSync(newPassword, 10);
  const updateParams = {
    TableName: 'CharityTable2',
    Key: {
      PK: `USER#${resetToken.email}`,
      SK: `USER#${resetToken.email}`,
    },
    UpdateExpression: 'SET passwordHash = :passwordHash',
    ExpressionAttributeValues: {
      ':passwordHash': hashedPassword,
    },
  };

  await dynamoDb.send(new UpdateCommand(updateParams));

  // Delete used reset token
  const deleteTokenParams = {
    TableName: 'CharityTable2',
    Key: {
      PK: `RESET#${token}`,
      SK: `USER#${resetToken.email}`,
    },
  };

  await dynamoDb.send(new DeleteCommand(deleteTokenParams));
  return { success: true };
}
</file>

<file path="app/actions/blobs.js">
'use server'

import { del } from '@vercel/blob';

export async function deleteBlob(url) {
  if (!url) return;
  
  try {
    // Extract the blob path from the URL
    const urlObj = new URL(url);
    const pathname = urlObj.pathname;
    // Remove the leading slash if present
    const blobPath = pathname.startsWith('/') ? pathname.slice(1) : pathname;

    await del(blobPath, {
      token: process.env.BLOB_READ_WRITE_TOKEN
    });

    return { success: true };
  } catch (error) {
    console.error('Error deleting blob:', error);
    // Don't throw the error as this is a cleanup operation
    return { success: false, error: error.message };
  }
}
</file>

<file path="app/actions/dateDonations.js">
'use server'

import { DynamoDBDocumentClient, PutCommand, QueryCommand, UpdateCommand } from "@aws-sdk/lib-dynamodb";
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { unstable_cache } from 'next/cache';
import { revalidateTag } from 'next/cache';
import { format as formatDate } from 'date-fns';
import { ar } from 'date-fns/locale';
import ExcelJS from 'exceljs';

const getDynamoDb = () => {
  const client = new DynamoDBClient({
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    },
    region: process.env.AWS_REGION,
  });

  return DynamoDBDocumentClient.from(client, {
    marshallOptions: {
      removeUndefinedValues: true,
    },
  });
};

// Phone number validation
const validatePhoneNumber = (phone) => {
  const phoneRegex = /^05\d{8}$/;
  return phoneRegex.test(phone);
};

export async function createDateDonation(donationData) {
  const dynamoDb = getDynamoDb();
  const timestamp = Date.now().toString();
  const createdAt = new Date().toISOString();

  // Validate phone number
  if (!validatePhoneNumber(donationData.phoneNumber)) {
    throw new Error('Invalid phone number');
  }

  // Create donation item with updated schema
  const donation = {
    PK: "DATE_DONATIONS",
    SK: `DONATION#${timestamp}`,
    GSI1PK: "DATE_DONATION",
    GSI1SK: createdAt,
    donationType: donationData.donationType,
    donorName: donationData.donorName || 'Anonymous',
    quantity: parseFloat(donationData.quantity),
    phoneNumber: donationData.phoneNumber,
    images: donationData.images || [],
    createdAt,
    year: new Date().getFullYear(),
    month: new Date().getMonth() + 1, // Adding month for better querying
    notes: donationData.notes || '', // New field for admin notes
  };

  await dynamoDb.send(new PutCommand({
    TableName: "CharityTable2",
    Item: donation
  }));

  // Revalidate both all donations and month-specific cache
  revalidateTag('datedonations');
  return donation;
}

export const getDateDonations = unstable_cache(
  async () => {
    const dynamoDb = getDynamoDb();
    const result = await dynamoDb.send(new QueryCommand({
      TableName: "CharityTable2",
      KeyConditionExpression: "PK = :pk",
      ExpressionAttributeValues: {
        ":pk": "DATE_DONATIONS"
      },
      ScanIndexForward: false
    }));
    return result.Items;
  },
  ['datedonations', 'all'],
  { 
    tags: ['datedonations'],
    revalidate: 3000 
  }
);

// New function to get donations by month and year
export const getDateDonationsByMonth = unstable_cache(
  async (year, month) => {
    const dynamoDb = getDynamoDb();
    
    const result = await dynamoDb.send(new QueryCommand({
      TableName: "CharityTable2",
      IndexName: "DateDonationsByMonthIndex", // New GSI
      KeyConditionExpression: "GSI2PK = :pk AND begins_with(GSI2SK, :sk)",
      ExpressionAttributeValues: {
        ":pk": `YEAR#${year}`,
        ":sk": `MONTH#${month}#`
      },
      ScanIndexForward: false
    }));

    return result.Items;
  },
  (year, month) => ['datedonations', 'by-month', year, month],
  { 
    tags: ['datedonations'],
    revalidate: 3000, 
  }
);

// New function to update donation status
export async function updateDateDonationStatus(donationId, status, notes) {
  const dynamoDb = getDynamoDb();
  
  await dynamoDb.send(new UpdateCommand({
    TableName: "CharityTable2",
    Key: {
      PK: "DATE_DONATIONS",
      SK: `DONATION#${donationId}`
    },
    UpdateExpression: "SET #status = :status, notes = :notes",
    ExpressionAttributeNames: {
      "#status": "status"
    },
    ExpressionAttributeValues: {
      ":status": status,
      ":notes": notes
    }
  }));

  // Revalidate all related caches
  revalidateTag('datedonations');
  return { success: true };
}

export async function exportFarmerDonations(startDate, endDate, format = 'excel') {
  const dynamoDb = getDynamoDb();
  let donations;

  if (startDate && endDate) {
    // Query donations by date range
    const params = {
      TableName: "CharityTable2",
      KeyConditionExpression: "PK = :pk",
      FilterExpression: "createdAt BETWEEN :start AND :end",
      ExpressionAttributeValues: {
        ":pk": "DATE_DONATIONS",
        ":start": startDate.toISOString(),
        ":end": endDate.toISOString()
      }
    };

    const result = await dynamoDb.send(new QueryCommand(params));
    donations = result.Items;
  } else {
    // Get all donations
    const params = {
      TableName: "CharityTable2",
      KeyConditionExpression: "PK = :pk",
      ExpressionAttributeValues: {
        ":pk": "DATE_DONATIONS"
      }
    };

    const result = await dynamoDb.send(new QueryCommand(params));
    donations = result.Items;
  }

  // Format data
  const formattedDonations = donations.map(donation => ({
    donorName: donation.donorName,
    phoneNumber: donation.phoneNumber,
    donationType: donation.donationType,
    quantity: donation.quantity,
    date: formatDate(new Date(donation.createdAt), 'P', { locale: ar }),
    createdAt: donation.createdAt // for sorting
  }));

  // Sort by date (newest first)
  formattedDonations.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  if (format === 'excel') {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Farmer Donations', { 
      views: [{ rightToLeft: false }] 
    });

    // Set column headers
    worksheet.columns = [
      { header: 'Donor Name', key: 'donorName', width: 30 },
      { header: 'Phone Number', key: 'phoneNumber', width: 15 },
      { header: 'Donation Type', key: 'donationType', width: 15 },
      { header: 'Quantity (kg)', key: 'quantity', width: 15 },
      { header: 'Date', key: 'date', width: 20 }
    ];

    // Add rows
    worksheet.addRows(formattedDonations);

    // Style the header row
    worksheet.getRow(1).font = { bold: true };
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFF8F7F8' }
    };

    // Generate buffer and convert to array
    const buffer = await workbook.xlsx.writeBuffer();
    return { 
      format: 'excel', 
      data: [...new Uint8Array(buffer)]
    };
  } else {
    // CSV format
    const csvRows = [
      ['Donor Name', 'Phone Number', 'Donation Type', 'Quantity (kg)', 'Date'],
      ...formattedDonations.map(d => [
        d.donorName,
        d.phoneNumber,
        d.donationType,
        d.quantity,
        d.date
      ])
    ];

    const csvContent = csvRows.map(row => row.join(',')).join('\n');
    return { format: 'csv', data: csvContent };
  }
}
</file>

<file path="app/actions/donations.js">
'use server'

import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, PutCommand, UpdateCommand, QueryCommand, ScanCommand, GetCommand } from "@aws-sdk/lib-dynamodb";
import { checkRateLimit } from './rateLimit';
import { headers } from 'next/headers';
import { unstable_cache } from 'next/cache';
import { revalidateTag } from 'next/cache';
import { format as formatDate } from 'date-fns';
import { enUS } from 'date-fns/locale';
import ExcelJS from 'exceljs';

const getDynamoDb = () => {
  const client = new DynamoDBClient({
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    },
    region: process.env.AWS_REGION,
  });

  return DynamoDBDocumentClient.from(client, {
    marshallOptions: {
      removeUndefinedValues: true,
    },
  });
};

export async function createDonation(orgId, donationData) {
  const headersList = headers();
  const ip = headersList.get('x-forwarded-for') || 'unknown';
  const userAgent = headersList.get('user-agent') || 'unknown';
  
  const ipLimit = await checkRateLimit(`IP_${ip}`);
  const phoneLimit = await checkRateLimit(`PHONE_${donationData.phoneNumber}`);

  if (!ipLimit.allowed || !phoneLimit.allowed) {
    const resetTime = new Date(Math.max(ipLimit.resetAt, phoneLimit.resetAt));
    throw new Error(
      `Too many requests. Please try again after ${resetTime.toLocaleTimeString()}. ` +
      `IP remaining: ${ipLimit.remaining}, Phone remaining: ${phoneLimit.remaining}`
    );
  }

  const timestamp = Date.now().toString();
  const createdAt = new Date().toISOString();
  
  // Create donation with the new GSI attributes
  const donation = {
    PK: `ORG#${orgId}`,
    SK: `DONATION#${timestamp}`,
    GSI2PK: "DONATION", // Just "DONATION" for the partition key
    GSI2SK: createdAt, // This will allow us to query by date
    phoneNumber: donationData.phoneNumber,
    amount: donationData.amount,
    createdAt,
    metadata: {
      ip,
      userAgent,
      origin: headersList.get('origin') || 'unknown',
      referer: headersList.get('referer') || 'unknown',
      ipRateLimit: ipLimit,
      phoneRateLimit: phoneLimit
    }
  };

  const dynamoDb = getDynamoDb();
  await dynamoDb.send(new PutCommand({
    TableName: "CharityTable2",
    Item: donation
  }));

  await dynamoDb.send(new UpdateCommand({
    TableName: "CharityTable2",
    Key: {
      PK: "ADMIN",
      SK: `ORG#${orgId}`
    },
    UpdateExpression: "ADD totalDonations :amount, donationCount :one",
    ExpressionAttributeValues: {
      ":amount": donationData.amount,
      ":one": 1
    }
  }));

  // Revalidate multiple related caches
  revalidateTag('donations');
  revalidateTag('organizations'); // Since org totals are updated

  return donation;
}

export const getAllDonations = unstable_cache(
  async (startDate, endDate) => {
    const dynamoDb = getDynamoDb();

    if (startDate && endDate) {
      // Use GSI to query donations by date range
      const params = {
        TableName: "CharityTable2",
        IndexName: "DonationDateIndex",
        KeyConditionExpression: "GSI2PK = :pk AND GSI2SK BETWEEN :start AND :end",
        ExpressionAttributeValues: {
          ":pk": "DONATION",
          ":start": startDate.toISOString(),
          ":end": endDate.toISOString()
        },
        ScanIndexForward: false // This will return items in descending order (newest first)
      };

      const result = await dynamoDb.send(new QueryCommand(params));
      return result.Items;
    } else {
      // If no date range is provided, get recent donations
      const params = {
        TableName: "CharityTable2",
        IndexName: "DonationDateIndex",
        KeyConditionExpression: "GSI2PK = :pk",
        ExpressionAttributeValues: {
          ":pk": "DONATION"
        },
        ScanIndexForward: false, // This will return items in descending order (newest first)
        Limit: 1000 // Limit to latest 1000 donations for performance
      };

      const result = await dynamoDb.send(new QueryCommand(params));
      return result.Items;
    }
  },
  (startDate, endDate) => [
    'donations', 
    'all',
    startDate?.toISOString() || 'all',
    endDate?.toISOString() || 'all'
  ],
  { 
    tags: ['donations'],
    revalidate: 3000, 
  }
);

export const getDonationsByOrg = unstable_cache(
  async (orgId) => {
    const params = {
      TableName: "CharityTable2",
      KeyConditionExpression: "PK = :pk AND begins_with(SK, :sk)",
      ExpressionAttributeValues: {
        ":pk": `ORG#${orgId}`,
        ":sk": "DONATION#"
      },
      ScanIndexForward: false, // This will return items in descending order (newest first)
      Limit: 50 // Limit to latest 50 donations
    };

    const dynamoDb = getDynamoDb();
    const result = await dynamoDb.send(new QueryCommand(params));
    return result.Items;
  },
  (orgId) => ['donations', 'by-org', orgId],
  { 
    tags: ['donations'],
    revalidate: 3000, 
  }
);

export async function findSuspiciousDonations(orgId, options = {}) {
  const {
    timeWindow = 3600000, // 1 hour
    maxDonationsPerIP = 10,
    maxDonationsPerPhone = 5
  } = options;

  const dynamoDb = getDynamoDb();
  const result = await dynamoDb.send(new QueryCommand({
    TableName: "CharityTable2",
    KeyConditionExpression: "PK = :pk AND begins_with(SK, :sk)",
    ExpressionAttributeValues: {
      ":pk": `ORG#${orgId}`,
      ":sk": "DONATION#"
    }
  }));

  const now = Date.now();
  const recentDonations = result.Items.filter(
    donation => now - new Date(donation.createdAt).getTime() < timeWindow
  );

  // Group by IP and phone number
  const groupedByIP = {};
  const groupedByPhone = {};

  recentDonations.forEach(donation => {
    const ip = donation.metadata.ip;
    const phone = donation.phoneNumber;

    groupedByIP[ip] = groupedByIP[ip] || [];
    groupedByIP[ip].push(donation);

    groupedByPhone[phone] = groupedByPhone[phone] || [];
    groupedByPhone[phone].push(donation);
  });

  // Find suspicious activities
  const suspicious = {
    byIP: Object.entries(groupedByIP)
      .filter(([_, donations]) => donations.length > maxDonationsPerIP)
      .map(([ip, donations]) => ({
        ip,
        count: donations.length,
        donations: donations.map(d => d.SK)
      })),
    byPhone: Object.entries(groupedByPhone)
      .filter(([_, donations]) => donations.length > maxDonationsPerPhone)
      .map(([phone, donations]) => ({
        phone,
        count: donations.length,
        donations: donations.map(d => d.SK)
      }))
  };

  return suspicious;
}

export async function exportDonations(startDate, endDate, format = 'excel') {
  const dynamoDb = getDynamoDb();
  let donations;

  if (startDate && endDate) {
    // Use GSI to query donations by date range
    const params = {
      TableName: "CharityTable2",
      IndexName: "DonationDateIndex",
      KeyConditionExpression: "GSI2PK = :pk AND GSI2SK BETWEEN :start AND :end",
      ExpressionAttributeValues: {
        ":pk": "DONATION",
        ":start": startDate.toISOString(),
        ":end": endDate.toISOString()
      },
      ScanIndexForward: false
    };

    const result = await dynamoDb.send(new QueryCommand(params));
    donations = result.Items;
  } else {
    // Get all donations
    const params = {
      TableName: "CharityTable2",
      IndexName: "DonationDateIndex",
      KeyConditionExpression: "GSI2PK = :pk",
      ExpressionAttributeValues: {
        ":pk": "DONATION"
      },
      ScanIndexForward: false
    };

    const result = await dynamoDb.send(new QueryCommand(params));
    donations = result.Items;
  }

  // Get organization names
  const orgIds = [...new Set(donations.map(d => d.PK.split('#')[1]))];
  const orgsData = {};
  
  for (const orgId of orgIds) {
    const result = await dynamoDb.send(new GetCommand({
      TableName: "CharityTable2",
      Key: {
        PK: "ADMIN",
        SK: `ORG#${orgId}`
      }
    }));
    if (result.Item) {
      orgsData[orgId] = result.Item.name;
    }
  }

  // Format data
  const formattedDonations = donations.map(donation => ({
    organizationName: orgsData[donation.PK.split('#')[1]] || 'Unknown',
    phoneNumber: donation.phoneNumber,
    amount: donation.amount,
    date: formatDate(new Date(donation.createdAt), 'P', { locale: enUS }),
    createdAt: donation.createdAt // for sorting
  }));

  // Sort by date (newest first)
  formattedDonations.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  if (format === 'excel') {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Donations', { 
      views: [{ rightToLeft: false }] 
    });

    // Set column headers
    worksheet.columns = [
      { header: 'Organization', key: 'organizationName', width: 30 },
      { header: 'Phone Number', key: 'phoneNumber', width: 15 },
      { header: 'Amount', key: 'amount', width: 15 },
      { header: 'Date', key: 'date', width: 20 }
    ];

    // Add rows
    worksheet.addRows(formattedDonations);

    // Style the header row
    worksheet.getRow(1).font = { bold: true };
    worksheet.getRow(1).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFF8F7F8' }
    };

    // Generate buffer and convert to base64
    const buffer = await workbook.xlsx.writeBuffer();
    return { 
      format: 'excel', 
      data: [...new Uint8Array(buffer)] // Convert buffer to array
    };
  } else {
    // CSV format
    const csvRows = [
      ['Organization', 'Phone Number', 'Amount', 'Date'],
      ...formattedDonations.map(d => [
        d.organizationName,
        d.phoneNumber,
        d.amount,
        d.date
      ])
    ];

    const csvContent = csvRows.map(row => row.join(',')).join('\n');
    return { format: 'csv', data: csvContent };
  }
}
</file>

<file path="app/actions/organizations.js">
'use server'

import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, QueryCommand, PutCommand, DeleteCommand, UpdateCommand } from "@aws-sdk/lib-dynamodb";
import { unstable_cache } from 'next/cache';
import { revalidateTag } from 'next/cache';

const getDynamoDb = () => {
  const client = new DynamoDBClient({
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    },
    region: process.env.AWS_REGION,
  });

  return DynamoDBDocumentClient.from(client, {
    marshallOptions: {
      removeUndefinedValues: true,
    },
  });
};

export const getAllOrganizations = unstable_cache(
  async () => {
    const dynamoDb = getDynamoDb();
    const params = {
      TableName: "CharityTable2",
      KeyConditionExpression: "PK = :pk AND begins_with(SK, :sk)",
      ExpressionAttributeValues: {
        ":pk": "ADMIN",
        ":sk": "ORG#"
      }
    };

    const result = await dynamoDb.send(new QueryCommand(params));
    return result.Items;
  },
  ['organizations', 'list'],
  { 
    tags: ['organizations'],
    revalidate: 3000, 
  }
);

export const getOrganizationByUrl = unstable_cache(
  async (customUrl) => {
    const dynamoDb = getDynamoDb();
    const params = {
      TableName: "CharityTable2",
      IndexName: "CustomUrlIndex",
      KeyConditionExpression: "GSI1PK = :pk",
      ExpressionAttributeValues: {
        ":pk": `URL#${customUrl}`
      }
    };

    const result = await dynamoDb.send(new QueryCommand(params));
    return result.Items?.[0] || null;
  },
  (customUrl) => ['organizations', 'by-url', customUrl], // Dynamic cache key
  { 
    tags: ['organizations'],
    revalidate: 3000, 
  }
);

export async function createOrganization(orgData) {
  const dynamoDb = getDynamoDb();
  const orgId = Date.now().toString();
  
  const orgParams = {
    TableName: "CharityTable2",
    Item: {
      PK: "ADMIN",
      SK: `ORG#${orgId}`,
      GSI1PK: `URL#${orgData.customUrl}`,
      GSI1SK: `ORG#${orgId}`,
      customUrl: orgData.customUrl,
      name: orgData.name,
      logo: orgData.logo,
      colors: orgData.colors,
      donationChoices: orgData.donationChoices || [30, 60, 120],
      defaultChoices: orgData.defaultChoices || true,
      createdAt: new Date().toISOString(),
      totalDonations: 0,
      donationCount: 0
    }
  };

  await dynamoDb.send(new PutCommand(orgParams));
  revalidateTag('organizations');
  return orgId;
}

export async function updateOrganization(orgId, updates) {
  const dynamoDb = getDynamoDb();
  const params = {
    TableName: "CharityTable2",
    Key: {
      PK: "ADMIN",
      SK: `ORG#${orgId}`
    },
    UpdateExpression: "SET donationChoices = :choices, #name = :name, customUrl = :customUrl, GSI1PK = :gsi1pk, logo = :logo",
    ExpressionAttributeValues: {
      ":choices": updates.donationChoices,
      ":name": updates.name,
      ":customUrl": updates.customUrl,
      ":gsi1pk": `URL#${updates.customUrl}`,
      ":logo": updates.logo
    },
    ExpressionAttributeNames: {
      "#name": "name"
    }
  };

  await dynamoDb.send(new UpdateCommand(params));
  revalidateTag('organizations');
  return { success: true };
}

export async function deleteOrganization(orgId) {
  const dynamoDb = getDynamoDb();
  const params = {
    TableName: "CharityTable2",
    Key: {
      PK: "ADMIN",
      SK: `ORG#${orgId}`
    }
  };

  await dynamoDb.send(new DeleteCommand(params));
  revalidateTag('organizations');
  return { success: true };
}

// Add new action for optimistic updates
export async function createOrganizationWithOptimistic(formData) {
  try {
    const orgId = await createOrganization(formData);
    
    // Return the complete organization object for optimistic UI
    return {
      success: true,
      organization: {
        PK: "ADMIN",
        SK: `ORG#${orgId}`,
        GSI1PK: `URL#${formData.customUrl}`,
        GSI1SK: `ORG#${orgId}`,
        customUrl: formData.customUrl,
        name: formData.name,
        logo: formData.logo,
        colors: formData.colors,
        donationChoices: formData.donationChoices || [30, 60, 120],
        defaultChoices: formData.defaultChoices || true,
        createdAt: new Date().toISOString(),
        totalDonations: 0,
        donationCount: 0
      }
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}
</file>

<file path="app/actions/rateLimit.js">
'use server'

import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, GetCommand, PutCommand } from "@aws-sdk/lib-dynamodb";

const getDynamoDb = () => {
  const client = new DynamoDBClient({
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    },
    region: process.env.AWS_REGION,
  });

  return DynamoDBDocumentClient.from(client, {
    marshallOptions: {
      removeUndefinedValues: true,
    },
  });
};

export async function checkRateLimit(identifier, limit = 30, windowMs = 300000) { // 30 requests per 5 minutes
  const dynamoDb = getDynamoDb();
  const now = Date.now();
  const windowStart = now - windowMs;

  try {
    const params = {
      TableName: "CharityTable2",
      Key: {
        PK: `RATELIMIT#${identifier}`,
        SK: "COUNTER"
      }
    };

    const result = await dynamoDb.send(new GetCommand(params));
    const record = result.Item;

    if (record) {
      // Clean up old timestamps and get current count
      const requests = record.timestamps.filter(timestamp => timestamp > windowStart);
      
      if (requests.length >= limit) {
        console.warn(`Rate limit exceeded for ${identifier}: ${requests.length} requests in ${windowMs}ms`);
        return {
          allowed: false,
          remaining: 0,
          resetAt: windowStart + windowMs
        };
      }

      // Add new timestamp
      requests.push(now);

      await dynamoDb.send(new PutCommand({
        TableName: "CharityTable2",
        Item: {
          PK: `RATELIMIT#${identifier}`,
          SK: "COUNTER",
          timestamps: requests,
          updatedAt: now
        }
      }));

      return {
        allowed: true,
        remaining: limit - requests.length,
        resetAt: windowStart + windowMs
      };
    } else {
      // First request
      await dynamoDb.send(new PutCommand({
        TableName: "CharityTable2",
        Item: {
          PK: `RATELIMIT#${identifier}`,
          SK: "COUNTER",
          timestamps: [now],
          updatedAt: now
        }
      }));

      return {
        allowed: true,
        remaining: limit - 1,
        resetAt: now + windowMs
      };
    }
  } catch (error) {
    console.error('Rate limit check error:', error);
    // In case of error, allow the request but log the error
    return {
      allowed: true,
      remaining: null,
      resetAt: null,
      error: error.message
    };
  }
}
</file>

<file path="app/actions/users.js">
'use server'

import { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';
import { v4 as uuidv4 } from 'uuid';
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, PutCommand, ScanCommand } from '@aws-sdk/lib-dynamodb';
import { unstable_cache } from 'next/cache';

const getDynamoDb = () => {
  const client = new DynamoDBClient({
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    },
    region: process.env.AWS_REGION,
  });

  return DynamoDBDocumentClient.from(client, {
    marshallOptions: {
      removeUndefinedValues: true,
    },
  });
};

const sesClient = new SESClient({ 
  region: 'eu-north-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

export async function sendUserInvitation(email) {
  const token = uuidv4();

  const params = {
    TableName: 'CharityTable2',
    Item: {
      PK: `TOKEN#${token}`,
      SK: `USER#${email}`,
      email,
      createdAt: new Date().toISOString(),
    },
  };

  await getDynamoDb().send(new PutCommand(params));

  const emailParams = {
    Destination: {
      ToAddresses: [email],
    },
    Message: {
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: `
            <table style="width: 100%; border-collapse: collapse; font-family: Arial, sans-serif;">
              <tr>
                <td style="padding: 20px; text-align: center; background-color: #f8f7f8;">
                  <h2 style="color: #998966;">Invitation to Join Organization Management Dashboard</h2>
                  <p>Hello,</p>
                  <p>You have been invited to join the Organization Management Dashboard. Please click the link below to set up your password and access the dashboard:</p>
                  <a href="https://charity-dashboard.vercel.app/setup-password?token=${token}" style="display: inline-block; margin-top: 20px; padding: 10px 20px; background-color: #998966; color: white; text-decoration: none; border-radius: 5px;">Set Up Password</a>
                  <p style="margin-top: 20px;">If you did not request this invitation, you can ignore this email.</p>
                </td>
              </tr>
            </table>
          `,
        },
      },
      Subject: {
        Charset: 'UTF-8',
        Data: 'Invitation to Join Dashboard',
      },
    },
    Source: 'bhk891@gmail.com',
  };

  await sesClient.send(new SendEmailCommand(emailParams));
  
  return { success: true, token }; // Return the token
}

export const getAllUsers = unstable_cache(
  async () => {
    const params = {
      TableName: 'CharityTable2',
    };

    const result = await getDynamoDb().send(new ScanCommand(params));
    return result.Items.filter(item => item.PK.startsWith('USER#')).map(item => ({
      email: item.PK.split('#')[1],
      createdAt: item.createdAt,
    }));
  },
  ['users', 'all'],
  { 
    tags: ['users'],
    revalidate: 3000 
  }
);
</file>

<file path="app/admin/_components/AdminDashboardClient.js">
'use client';

import { useState, useOptimistic } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import CreateOrgButton from './CreateOrgButton';
import OrgCard from './OrgCard';
import withAuth from '../../utils/withAuth';

function AdminDashboardClientBase({ 
  initialOrganizations, 
  initialDonationsMap,
  showOnlyButton, 
  showOnlyContent 
}) {
  // Use optimistic state for organizations
  const [optimisticOrgs, addOptimisticOrg] = useOptimistic(
    initialOrganizations,
    (state, newOrg) => [...state, newOrg]
  );

  if (showOnlyButton) {
    return (
      <CreateOrgButton 
        onOptimisticAdd={addOptimisticOrg}
      />
    );
  }

  if (showOnlyContent) {
    return (
      <motion.div 
        className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6"
        layout
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3 }}
      >
        <AnimatePresence mode="popLayout">
          {optimisticOrgs.map((org) => {
            const orgId = org.SK.split('#')[1];
            return (
              <motion.div
                key={org.SK}
                layout
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.2 }}
                className={org._isOptimistic ? 'opacity-70' : ''}
              >
                <OrgCard 
                  organization={org}
                  donations={initialDonationsMap[orgId] || []}
                  isOptimistic={org._isOptimistic}
                />
              </motion.div>
            );
          })}
        </AnimatePresence>
      </motion.div>
    );
  }

  return null;
}

export default withAuth(AdminDashboardClientBase);
</file>

<file path="app/admin/_components/AnalyticsTabSkeleton.js">
export default function AnalyticsTabSkeleton() {
    return (
      <div className="space-y-8">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="h-6 bg-gray-200 rounded w-48 mb-6"></div>
          <div className="h-[300px] md:h-[600px] bg-gray-100 rounded-lg animate-pulse"></div>
        </div>
  
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="h-6 bg-gray-200 rounded w-36 mb-4"></div>
          <div className="overflow-x-auto">
            <div className="min-w-full">
              <div className="bg-gray-50 p-4">
                <div className="grid grid-cols-4 gap-4">
                  {[...Array(4)].map((_, i) => (
                    <div key={i} className="h-4 bg-gray-200 rounded"></div>
                  ))}
                </div>
              </div>
              <div className="divide-y divide-gray-200">
                {[...Array(5)].map((_, index) => (
                  <div key={index} className="p-4">
                    <div className="grid grid-cols-4 gap-4">
                      {[...Array(4)].map((_, i) => (
                        <div key={i} className="h-4 bg-gray-200 rounded"></div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
</file>

<file path="app/admin/_components/CreateOrgButton.js">
'use client';

import { useState, useRef, useEffect } from 'react';
import Image from 'next/image';
import { createOrganizationWithOptimistic } from '@/app/actions/organizations';
import { useFormState, useFormStatus } from 'react-dom';

// Reuse the DonationChoicesEditor component
function DonationChoicesEditor({ choices, onChange }) {
  const [newAmount, setNewAmount] = useState('');

  const handleAdd = () => {
    if (newAmount && !isNaN(newAmount)) {
      const amount = parseInt(newAmount);
      onChange([...choices, amount].sort((a, b) => a - b));
      setNewAmount('');
    }
  };

  const handleRemove = (index) => {
    const newChoices = choices.filter((_, i) => i !== index);
    onChange(newChoices);
  };

  return (
    <div className="space-y-3">
      <div className="flex flex-wrap gap-2">
        {choices.map((amount, index) => (
          <div
            key={index}
            className="inline-flex items-center bg-gray-100 rounded-full px-3 py-1"
          >
            <span className="text-sm">{amount} SAR</span>
            <button
              type="button"
              onClick={() => handleRemove(index)}
              className="mr-2 text-gray-500 hover:text-red-500"
            >
              ×
            </button>
          </div>
        ))}
      </div>
      <div className="flex gap-2">
        <input
          type="number"
          value={newAmount}
          onChange={(e) => setNewAmount(e.target.value)}
          placeholder="Enter amount"
          className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
        />
        <button
          type="button"
          onClick={handleAdd}
          className="bg-[#998966] text-white px-4 py-2 rounded-lg hover:opacity-90"
        >
          Add
        </button>
      </div>
    </div>
  );
}

// Add this component for the submit button
function SubmitButton() {
  const { pending } = useFormStatus();
  
  return (
    <button
      type="submit"
      disabled={pending}
      className={`bg-[#998966] text-white px-6 py-2.5 rounded-lg transition-opacity ${
        pending ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'
      }`}
    >
      {pending ? 'Saving...' : 'Save'}
    </button>
  );
}

export default function CreateOrgButton({ onOptimisticAdd }) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef(null);
  const [formData, setFormData] = useState({
    name: '',
    customUrl: '',
    logo: '',
    colors: { primary: '#998966', secondary: '#f8f7f8' },
    donationChoices: [30, 60, 120]
  });
  const [previewUrl, setPreviewUrl] = useState(null);

  // Initial state for form
  const initialState = { message: null, errors: {} };

  // Form state handler
  const [state, formAction] = useFormState(async (prevState, formData) => {
    try {
      // Validate required fields
      if (!formData.get('name') || !formData.get('customUrl') || !formData.get('logo')) {
        return { 
          message: 'An error occurred',
          errors: { submit: 'All fields are required' }
        };
      }

      // Create organization data object
      const orgData = {
        name: formData.get('name'),
        customUrl: formData.get('customUrl'),
        logo: formData.get('logo'),
        colors: { primary: '#998966', secondary: '#f8f7f8' },
        donationChoices: JSON.parse(formData.get('donationChoices') || '[30, 60, 120]'),
      };

      const result = await createOrganizationWithOptimistic(orgData);
      
      if (result.success) {
        // Add optimistic flag
        const optimisticOrg = {
          ...result.organization,
          _isOptimistic: true
        };
        
        // Add to optimistic state
        onOptimisticAdd(optimisticOrg);
        
        // Close modal and reset form
        setIsModalOpen(false);
        setFormData({
          name: '',
          customUrl: '',
          logo: '',
          colors: { primary: '#998966', secondary: '#f8f7f8' },
          donationChoices: [30, 60, 120]
        });
        setPreviewUrl(null);
        
        return { message: 'Organization created successfully', errors: {} };
      } else {
        return { 
          message: 'Error creating organization',
          errors: { submit: result.error }
        };
      }
    } catch (error) {
      return { 
        message: 'An unexpected error occurred',
        errors: { submit: error.message }
      };
    }
  }, initialState);

  useEffect(() => {
    if (isModalOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isModalOpen]);

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    // Validate file type and size
    if (file.type !== 'image/png' || file.size > 500 * 1024) {
      alert('Please upload a PNG image less than 500KB');
      return;
    }

    try {
      setIsUploading(true);
      
      // Create preview URL
      const previewURL = URL.createObjectURL(file);
      setPreviewUrl(previewURL);

      // Prepare file for upload
      const filename = `logos/${Date.now()}-${file.name}`;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, 60000); // Increased to 60 seconds

      try {
        const response = await fetch(`/api/upload/blob?filename=${filename}`, {
          method: 'POST',
          body: file,
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `Connection error: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.url) {
          throw new Error('Image URL not received');
        }

        setFormData((prevData) => ({ ...prevData, logo: data.url }));
      } catch (fetchError) {
        if (fetchError.name === 'AbortError') {
          throw new Error('File upload took too long. Please try again');
        }
        throw fetchError;
      }
    } catch (error) {
      console.error('Error uploading file:', error);
      
      let errorMessage = 'Error uploading image';
      if (error.message.includes('took too long')) {
        errorMessage = error.message;
      } else if (error.message === 'Failed to fetch') {
        errorMessage = 'Server connection failed. Please check your internet connection and try again';
      } else {
        errorMessage += ': ' + error.message;
      }
      
      alert(errorMessage);
      setPreviewUrl(null);
      setFormData((prevData) => ({ ...prevData, logo: '' }));
      
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-[#998966] text-white px-4 py-2 rounded-lg hover:opacity-90 transition-opacity"
      >
        Add New Organization
      </button>

      {isModalOpen && (
        <div className="fixed inset-0 z-50">
          <div 
            className="absolute inset-0 bg-black bg-opacity-50"
            onClick={() => setIsModalOpen(false)}
          />
          
          <div className="absolute inset-0 flex items-center justify-center p-4">
            <form
              action={formAction}
              className="bg-white rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()}
            >
              {/* Header */}
              <div className="sticky top-0 bg-white px-6 py-4 border-b border-gray-200">
                <h3 className="text-xl font-semibold text-[#998966]">Add New Organization</h3>
              </div>

              {/* Form Content */}
              <div className="p-6 space-y-4">
                {/* Logo Upload */}
                <div>
                  <input
                    type="hidden"
                    name="logo"
                    value={formData.logo}
                    required
                  />
                  <div
                    className="w-24 h-24 md:w-32 md:h-32 mx-auto border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center relative overflow-hidden cursor-pointer"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    {isUploading ? (
                      <div className="text-center">
                        <svg className="animate-spin h-8 w-8 text-gray-400" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
                        </svg>
                      </div>
                    ) : previewUrl ? (
                      <Image
                        src={previewUrl}
                        alt="Logo preview"
                        layout="fill"
                        objectFit="contain"
                        className="object-contain scale-80"
                      />
                    ) : (
                      <div className="text-center p-2">
                        <svg className="mx-auto h-8 w-8 md:h-12 md:w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                        <p className="mt-1 text-xs md:text-sm text-gray-500 break-words text-center">
                          Choose organization logo
                        </p>
                      </div>
                    )}
                  </div>
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileUpload}
                    accept="image/png"
                    className="hidden"
                  />
                </div>

                {/* Organization Name */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Organization Name</label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
                    required
                  />
                </div>

                {/* Custom URL */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Custom URL</label>
                  <div className="flex items-center w-full">
                    <div className="bg-gray-100 text-gray-500 h-10 px-3 py-2 rounded-l-lg border border-r-0 border-gray-300 whitespace-nowrap text-sm">
                      https://charity-dashboard.vercel.app/
                    </div>
                    <input
                      type="text"
                      name="customUrl"
                      value={formData.customUrl}
                      onChange={(e) => {
                        const value = e.target.value.toLowerCase().replace(/[^a-z0-9]/g, '');
                        setFormData(prev => ({ ...prev, customUrl: value }));
                      }}
                      className="flex-1 px-3 w-full py-2 border h-10 border-gray-300 rounded-r-lg focus:ring-[#998966] focus:border-[#998966]"
                      required
                    />
                  </div>
                </div>

                {/* Donation Choices */}
                <div>
                  <input
                    type="hidden"
                    name="donationChoices"
                    value={JSON.stringify(formData.donationChoices)}
                  />
                  <label className="block text-sm font-medium text-gray-700 mb-2">Donation Options</label>
                  <DonationChoicesEditor
                    choices={formData.donationChoices}
                    onChange={(newChoices) => setFormData(prev => ({
                      ...prev,
                      donationChoices: newChoices
                    }))}
                  />
                </div>
              </div>

              {/* Error message */}
              {state?.errors?.submit && (
                <div className="px-6 pb-4">
                  <div className="p-4 text-red-500 bg-red-50 rounded-lg">
                    {state.errors.submit}
                  </div>
                </div>
              )}

              {/* Footer */}
              <div className="sticky bottom-0 bg-white px-6 py-4 border-t border-gray-200">
                <div className="grid grid-cols-2 gap-2">
                  <button
                    type="button"
                    onClick={() => setIsModalOpen(false)}
                    className="bg-gray-100 text-gray-800 px-4 py-2.5 rounded-lg hover:bg-gray-200"
                  >
                    Cancel
                  </button>
                  <SubmitButton />
                </div>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="app/admin/_components/DonationsList.js">
'use client';

import { useMemo } from 'react';
import { motion } from 'framer-motion';
import { format } from 'date-fns';
import { ar } from 'date-fns/locale';
import DonationsListSkeleton from './DonationsListSkeleton';

export default function DonationsList({ organizationId, donations, loading }) {
  const tableVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
    exit: { opacity: 0 }
  };

  const formattedDonations = useMemo(() => {
    if (!donations || donations.length === 0) return [];
    return donations.slice(0, 5).map((donation) => ({
      ...donation,
      formattedDate: format(new Date(donation.createdAt), 'P', { locale: ar }),
    }));
  }, [donations]);

  if (loading) {
    return <DonationsListSkeleton />;
  }

  if (formattedDonations.length === 0) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="text-center mt-4 text-gray-600"
      >
        No donations yet
      </motion.div>
    );
  }

  return (
    <motion.div
      initial="hidden"
      animate="visible"
      exit="exit"
      variants={tableVariants}
      className="mt-4"
      dir="ltr"
    >
      <h3 className="text-lg font-semibold mb-2">Latest Donations</h3>
      <div className="overflow-x-auto rounded-lg border border-gray-200">
        <div className="min-w-full inline-block align-middle">
          <div className="overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500">
                    Phone Number
                  </th>
                  <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500">
                    Amount
                  </th>
                  <th scope="col" className="px-3 py-2 text-left text-xs font-medium text-gray-500">
                    Date
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 bg-white">
                {formattedDonations.map((donation) => (
                  <tr key={donation.SK} className="hover:bg-gray-50">
                    <td className="whitespace-nowrap px-3 py-2 text-left text-xs text-gray-800">
                      <span className="inline-block max-w-[100px] truncate">
                        {donation.phoneNumber}
                      </span>
                    </td>
                    <td className="whitespace-nowrap px-3 py-2 text-left text-xs text-gray-800">
                      {donation.amount.toLocaleString('en-US')} SAR
                    </td>
                    <td className="whitespace-nowrap px-3 py-2 text-left text-xs text-gray-800">
                      {donation.formattedDate}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="app/admin/_components/DonationsListSkeleton.js">
export default function DonationsListSkeleton() {
  return (
    <div className="mt-4" dir="rtl">
      <div className="h-6 bg-gray-200 rounded w-32 mb-2 animate-pulse"></div>
      <div className="overflow-x-auto rounded-lg border border-gray-200">
        <div className="min-w-full">
          <div className="bg-gray-50 p-3">
            <div className="grid grid-cols-3 gap-4">
              <div className="h-4 bg-gray-200 rounded w-16 animate-pulse"></div>
              <div className="h-4 bg-gray-200 rounded w-16 animate-pulse"></div>
              <div className="h-4 bg-gray-200 rounded w-16 animate-pulse"></div>
            </div>
          </div>
          <div className="divide-y divide-gray-200">
            {[...Array(3)].map((_, index) => (
              <div key={index} className="p-3">
                <div className="grid grid-cols-3 gap-4">
                  <div className="h-4 bg-gray-200 rounded w-20 animate-pulse"></div>
                  <div className="h-4 bg-gray-200 rounded w-16 animate-pulse"></div>
                  <div className="h-4 bg-gray-200 rounded w-20 animate-pulse"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="app/admin/_components/ExportDonationsButton.js">
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiDownload, FiX } from 'react-icons/fi';
import { exportDonations } from '@/app/actions/donations';
import { toast } from 'react-hot-toast';

export default function ExportDonationsButton() {
  const [showModal, setShowModal] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState('excel');
  const [isAllTime, setIsAllTime] = useState(true);

  // Get default date range (first and last day of previous month)
  const getDefaultDateRange = () => {
    const now = new Date();
    const firstDay = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const lastDay = new Date(now.getFullYear(), now.getMonth(), 0);
    
    // Add one day to both dates
    firstDay.setDate(firstDay.getDate() + 1);
    lastDay.setDate(lastDay.getDate() + 1);
    
    return {
      startDate: firstDay.toISOString().split('T')[0],
      endDate: lastDay.toISOString().split('T')[0]
    };
  };

  const [dateRange, setDateRange] = useState(getDefaultDateRange());

  // Reset form when modal closes
  useEffect(() => {
    if (!showModal) {
      setDateRange(getDefaultDateRange());
      setExportFormat('excel');
      setIsAllTime(true);
    }
  }, [showModal]);

  const handleExport = async () => {
    try {
      setIsExporting(true);
      
      let startDate = null;
      let endDate = null;

      if (!isAllTime) {
        startDate = dateRange.startDate ? new Date(dateRange.startDate) : null;
        endDate = dateRange.endDate ? new Date(dateRange.endDate) : null;

        if (startDate && endDate && startDate > endDate) {
          toast.error('Start date must be before end date');
          return;
        }
      }

      const result = await exportDonations(startDate, endDate, exportFormat);

      // Create and trigger download
      const blob = exportFormat === 'excel' 
        ? new Blob([new Uint8Array(result.data)], { 
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
          })
        : new Blob([result.data], { 
            type: 'text/csv;charset=utf-8;' 
          });

      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `donations-${new Date().toISOString().split('T')[0]}.${
        exportFormat === 'excel' ? 'xlsx' : 'csv'
      }`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      setShowModal(false);
      toast.success('Donations exported successfully');
    } catch (error) {
      console.error('Export error:', error);
      toast.error('Error exporting donations');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <>
      <motion.button
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        onClick={() => setShowModal(true)}
        className="flex items-center gap-2 bg-[#998966] text-white px-4 py-2 rounded-lg hover:opacity-90"
      >
        <FiDownload className="w-4 h-4" />
        <span>Export Donations</span>
      </motion.button>

      <AnimatePresence>
        {showModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="absolute inset-0 bg-black bg-opacity-50"
              onClick={() => setShowModal(false)}
            />

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="relative bg-white rounded-lg shadow-xl p-6 w-full max-w-md"
              onClick={e => e.stopPropagation()}
            >
              <button
                onClick={() => setShowModal(false)}
                className="absolute left-4 top-4 text-gray-500 hover:text-gray-700"
              >
                <FiX className="w-5 h-5" />
              </button>

              <h3 className="text-xl font-semibold mb-4">Export Donations</h3>

              <div className="space-y-4">
                {/* Time Range Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Export Range</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      type="button"
                      onClick={() => setIsAllTime(true)}
                      className={`p-2 rounded-lg border-2 transition-colors ${
                        isAllTime
                          ? 'border-[#998966] bg-[#998966] text-white'
                          : 'border-gray-200 hover:border-[#998966]'
                      }`}
                    >
                      All Donations
                    </button>
                    <button
                      type="button"
                      onClick={() => setIsAllTime(false)}
                      className={`p-2 rounded-lg border-2 transition-colors ${
                        !isAllTime
                          ? 'border-[#998966] bg-[#998966] text-white'
                          : 'border-gray-200 hover:border-[#998966]'
                      }`}
                    >
                      Custom Period
                    </button>
                  </div>
                </div>

                {/* Date Range - Only show if not "All Time" */}
                <AnimatePresence>
                  {!isAllTime && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.2 }}
                      className="overflow-hidden"
                    >
                      <label className="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">From</label>
                          <input
                            type="date"
                            value={dateRange.startDate}
                            onChange={e => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                            className="w-full p-2 border rounded-lg"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">To</label>
                          <input
                            type="date"
                            value={dateRange.endDate}
                            onChange={e => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                            className="w-full p-2 border rounded-lg"
                          />
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* Export Format */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Export Format</label>
                  <div className="grid grid-cols-2 gap-3">
                    {['excel', 'csv'].map((format) => (
                      <button
                        key={format}
                        type="button"
                        onClick={() => setExportFormat(format)}
                        className={`p-2 rounded-lg border-2 transition-colors ${
                          exportFormat === format
                            ? 'border-[#998966] bg-[#998966] text-white'
                            : 'border-gray-200 hover:border-[#998966]'
                        }`}
                      >
                        {format.toUpperCase()}
                      </button>
                    ))}
                  </div>
                </div>

                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleExport}
                  disabled={isExporting}
                  className={`w-full py-2 rounded-lg bg-[#998966] text-white transition-opacity ${
                    isExporting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'
                  }`}
                >
                  {isExporting ? 'Exporting...' : 'Export'}
                </motion.button>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </>
  );
}
</file>

<file path="app/admin/_components/ExportFarmerDonationsButton.js">
'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiDownload, FiX } from 'react-icons/fi';
import { exportFarmerDonations } from '@/app/actions/dateDonations';
import { toast } from 'react-hot-toast';

export default function ExportFarmerDonationsButton() {
  const [showModal, setShowModal] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState('excel');
  const [isAllTime, setIsAllTime] = useState(true);

  // Get default date range (first and last day of previous month)
  const getDefaultDateRange = () => {
    const now = new Date();
    const firstDay = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const lastDay = new Date(now.getFullYear(), now.getMonth(), 0);
    
    // Add one day to both dates
    firstDay.setDate(firstDay.getDate() + 1);
    lastDay.setDate(lastDay.getDate() + 1);
    
    return {
      startDate: firstDay.toISOString().split('T')[0],
      endDate: lastDay.toISOString().split('T')[0]
    };
  };

  const [dateRange, setDateRange] = useState(getDefaultDateRange());

  // Reset form when modal closes
  useEffect(() => {
    if (!showModal) {
      setDateRange(getDefaultDateRange());
      setExportFormat('excel');
      setIsAllTime(true);
    }
  }, [showModal]);

  const handleExport = async () => {
    try {
      setIsExporting(true);
      
      let startDate = null;
      let endDate = null;

      if (!isAllTime) {
        startDate = dateRange.startDate ? new Date(dateRange.startDate) : null;
        endDate = dateRange.endDate ? new Date(dateRange.endDate) : null;

        if (startDate && endDate && startDate > endDate) {
          toast.error('Start date must be before end date');
          return;
        }
      }

      const result = await exportFarmerDonations(startDate, endDate, exportFormat);

      // Create and trigger download
      const blob = exportFormat === 'excel' 
        ? new Blob([new Uint8Array(result.data)], { 
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
          })
        : new Blob([result.data], { 
            type: 'text/csv;charset=utf-8;' 
          });

      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `farmer-donations-${new Date().toISOString().split('T')[0]}.${
        exportFormat === 'excel' ? 'xlsx' : 'csv'
      }`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      setShowModal(false);
      toast.success('Donations exported successfully');
    } catch (error) {
      console.error('Export error:', error);
      toast.error('Error exporting donations');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <>
      <motion.button
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        onClick={() => setShowModal(true)}
        className="flex items-center gap-2 bg-[#998966] text-white px-4 py-2 rounded-lg hover:opacity-90"
      >
        <FiDownload className="w-4 h-4" />
        <span>Export Donations</span>
      </motion.button>

      <AnimatePresence>
        {showModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="absolute inset-0 bg-black bg-opacity-50"
              onClick={() => setShowModal(false)}
            />

            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              className="relative bg-white rounded-lg shadow-xl p-6 w-full max-w-md"
              onClick={e => e.stopPropagation()}
            >
              <button
                onClick={() => setShowModal(false)}
                className="absolute left-4 top-4 text-gray-500 hover:text-gray-700"
              >
                <FiX className="w-5 h-5" />
              </button>

              <h3 className="text-xl font-semibold mb-4">Export Donations</h3>

              <div className="space-y-4">
                {/* Time Range Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Export Range</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      type="button"
                      onClick={() => setIsAllTime(true)}
                      className={`p-2 rounded-lg border-2 transition-colors ${
                        isAllTime
                          ? 'border-[#998966] bg-[#998966] text-white'
                          : 'border-gray-200 hover:border-[#998966]'
                      }`}
                    >
                      All Donations
                    </button>
                    <button
                      type="button"
                      onClick={() => setIsAllTime(false)}
                      className={`p-2 rounded-lg border-2 transition-colors ${
                        !isAllTime
                          ? 'border-[#998966] bg-[#998966] text-white'
                          : 'border-gray-200 hover:border-[#998966]'
                      }`}
                    >
                      Custom Period
                    </button>
                  </div>
                </div>

                {/* Date Range - Only show if not "All Time" */}
                <AnimatePresence>
                  {!isAllTime && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.2 }}
                      className="overflow-hidden"
                    >
                      <label className="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">From</label>
                          <input
                            type="date"
                            value={dateRange.startDate}
                            onChange={e => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                            className="w-full p-2 border rounded-lg"
                          />
                        </div>
                        <div>
                          <label className="block text-xs text-gray-500 mb-1">To</label>
                          <input
                            type="date"
                            value={dateRange.endDate}
                            onChange={e => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                            className="w-full p-2 border rounded-lg"
                          />
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* Export Format */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Export Format</label>
                  <div className="grid grid-cols-2 gap-3">
                    {['excel', 'csv'].map((format) => (
                      <button
                        key={format}
                        type="button"
                        onClick={() => setExportFormat(format)}
                        className={`p-2 rounded-lg border-2 transition-colors ${
                          exportFormat === format
                            ? 'border-[#998966] bg-[#998966] text-white'
                            : 'border-gray-200 hover:border-[#998966]'
                        }`}
                      >
                        {format.toUpperCase()}
                      </button>
                    ))}
                  </div>
                </div>

                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleExport}
                  disabled={isExporting}
                  className={`w-full py-2 rounded-lg bg-[#998966] text-white transition-opacity ${
                    isExporting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'
                  }`}
                >
                  {isExporting ? 'Exporting...' : 'Export'}
                </motion.button>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </>
  );
}
</file>

<file path="app/admin/_components/OrgCard.js">
'use client';

import { motion } from 'framer-motion';
import { useState, useEffect, useRef, useCallback } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import DonationsList from './DonationsList';
import DonationsListSkeleton from './DonationsListSkeleton';
import { updateOrganization, deleteOrganization } from '@/app/actions/organizations';
import { formatDistanceToNow } from 'date-fns';
import { ar } from 'date-fns/locale';
import { deleteBlob } from '@/app/actions/blobs';

function DonationChoicesEditor({ choices, onChange }) {
  const [newAmount, setNewAmount] = useState('');

  const handleAdd = () => {
    if (newAmount && !isNaN(newAmount)) {
      const amount = parseInt(newAmount);
      onChange([...choices, amount].sort((a, b) => a - b));
      setNewAmount('');
    }
  };

  const handleRemove = (index) => {
    const newChoices = choices.filter((_, i) => i !== index);
    onChange(newChoices);
  };

  return (
    <div className="space-y-3">
      <div className="flex flex-wrap gap-2">
        {choices.map((amount, index) => (
          <div
            key={index}
            className="inline-flex items-center bg-gray-100 rounded-full px-3 py-1"
          >
            <span className="text-sm">{amount} SAR</span>
            <button
              type="button"
              onClick={() => handleRemove(index)}
              className="ml-2 text-gray-500 hover:text-red-500"
            >
              ×
            </button>
          </div>
        ))}
      </div>
      <div className="flex gap-2">
        <input
          type="number"
          value={newAmount}
          onChange={(e) => setNewAmount(e.target.value)}
          placeholder="Enter amount"
          className="flex-1 px-3 py-2 border border-gray-300 rounded-lg"
        />
        <button
          type="button"
          onClick={handleAdd}
          className="bg-[#998966] text-white px-4 py-2 rounded-lg hover:opacity-90"
        >
          Add
        </button>
      </div>
    </div>
  );
}

export default function OrgCard({ organization, donations, onUpdate, onDelete, isOptimistic }) {
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef(null);
  const [editData, setEditData] = useState({
    name: organization.name,
    customUrl: organization.customUrl,
    donationChoices: organization.donationChoices,
    logo: organization.logo
  });
  const [previewUrl, setPreviewUrl] = useState(organization.logo);
  const [urlError, setUrlError] = useState('');
  const orgId = organization.SK.split('#')[1];  
  const [isEditing, setIsEditing] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 }
  };

  const modalVariants = {
    hidden: { opacity: 0, scale: 0.9 },
    visible: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.9 }
  };

  const validateCustomUrl = useCallback((url) => {
    if (url === organization.customUrl) return true;
    if (url.length < 3) return false;
    const urlRegex = /^[a-z0-9]+$/;
    return urlRegex.test(url);
  }, [organization.customUrl]);

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (file.type !== 'image/png' || file.size > 500 * 1024) {
      alert('Please upload a PNG image less than 500KB');
      return;
    }

    try {
      setIsUploading(true);
      
      const previewURL = URL.createObjectURL(file);
      setPreviewUrl(previewURL);

      const filename = `logos/${Date.now()}-${file.name}`;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000);

      try {
        const response = await fetch(`/api/upload/blob?filename=${filename}`, {
          method: 'POST',
          body: file,
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `Connection error: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.url) {
          throw new Error('Image URL not received');
        }

        setEditData(prev => ({ ...prev, logo: data.url }));
      } catch (fetchError) {
        if (fetchError.name === 'AbortError') {
          throw new Error('File upload took too long. Please try again');
        }
        throw fetchError;
      }
    } catch (error) {
      console.error('Error uploading file:', error);
      let errorMessage = 'Error uploading image';
      if (error.message.includes('took too long')) {
        errorMessage = error.message;
      } else if (error.message === 'Failed to fetch') {
        errorMessage = 'Failed to connect to server';
      } else {
        errorMessage += ': ' + error.message;
      }
      alert(errorMessage);
      setPreviewUrl(organization.logo);
      setEditData(prev => ({ ...prev, logo: organization.logo }));
    } finally {
      setIsUploading(false);
    }
  };

  const handleEdit = useCallback(async () => {
    if (!validateCustomUrl(editData.customUrl)) {
      setUrlError('Custom URL must contain only lowercase letters and numbers');
      return;
    }
    if (!editData.name.trim()) {
      setUrlError('Organization name is required');
      return;
    }

    setIsEditing(true);
    try {
      if (editData.logo !== organization.logo) {
        await deleteBlob(organization.logo);
      }
      await updateOrganization(orgId, editData);
      window.location.reload();
    } catch (error) {
      console.error('Error updating organization:', error);
      alert('Error during update');
    } finally {
      setIsEditing(false);
    }
  }, [editData, organization.logo, orgId, validateCustomUrl]);

  const handleDelete = useCallback(async () => {
    setIsDeleting(true);
    try {
      await deleteBlob(organization.logo);
      await deleteOrganization(orgId);
      window.location.reload();
    } catch (error) {
      console.error('Error deleting organization:', error);
      alert('Error during deletion');
    } finally {
      setIsDeleting(false);
    }
  }, [organization.logo, orgId]);

  return (
    <motion.div
      variants={cardVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
      layout
      className={`bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 p-6 ${
        isOptimistic ? 'opacity-70' : ''
      }`}
      dir="ltr"
    >
      {isOptimistic && (
        <div className="absolute inset-0 flex items-center justify-center bg-white bg-opacity-75">
          <div className="text-[#998966] animate-pulse">Adding...</div>
        </div>
      )}
      
      <div className="flex items-center space-x-4 mb-4">
        <div className="relative w-16 h-16 justify-center items-center rounded-full overflow-hidden border-2 border-[#998966]">
          <Image
            src={organization.logo}
            alt={organization.name}
            width={64}
            height={64}
            className="object-contain scale-75 transition-transform duration-300 hover:scale-90"
          />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-800">{organization.name}</h3>
          <p className="text-sm text-gray-500">{organization.customUrl}</p> 
        </div>
      </div>

      <div className="space-y-2">
        <div className="flex justify-between">
          <span className="text-gray-600">Total Donations:</span>
          <span className="font-semibold text-[#998966]">{organization.totalDonations.toLocaleString('en-US')} SAR</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Number of Donations:</span>
          <span className="font-semibold text-[#998966]">{organization.donationCount.toLocaleString('en-US')}</span>
        </div>
      </div>

      <div className="mt-4 flex space-x-2">
        <Link
          href={`/${organization.customUrl}`}
          className="bg-[#998966] text-white px-4 py-2 rounded hover:opacity-90 transition-opacity text-sm"
          target="_blank"
        >
          View Page
        </Link>
        <button
          onClick={() => setIsEditModalOpen(true)}
          className="bg-[#f8f7f8] text-[#998966] px-4 py-2 rounded hover:bg-gray-200 transition-colors text-sm"
        >
          Edit
        </button>
        <button
          onClick={() => setIsDeleteModalOpen(true)}
          className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors text-sm"
        >
          Delete
        </button>
      </div>
      
      <DonationsList organizationId={orgId} donations={donations} />

      {isEditModalOpen && (
        <motion.div
          initial="hidden"
          animate="visible"
          exit="exit"
          variants={modalVariants}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        >
          <div className="bg-white p-6 rounded-lg w-full max-w-md">
            <h3 className="text-xl font-semibold mb-4">Edit Organization</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Organization Logo</label>
                <div
                  className="w-24 h-24 mx-auto border-2 border-dashed border-gray-300 rounded-full flex items-center justify-center relative overflow-hidden cursor-pointer"
                  onClick={() => fileInputRef.current?.click()}
                >
                  {isUploading ? (
                    <div className="text-center">
                      <svg className="animate-spin h-8 w-8 text-gray-400" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
                      </svg>
                    </div>
                  ) : (
                    <Image
                      src={previewUrl}
                      alt="Logo preview"
                      width={96}
                      height={96}
                      className="object-contain scale-75"
                    />
                  )}
                </div>
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileUpload}
                  accept="image/png"
                  className="hidden"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Organization Name</label>
                <input
                  type="text"
                  value={editData.name}
                  onChange={(e) => setEditData(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Custom URL</label>
                <div className="flex items-center w-full">
                  <div className="bg-gray-100 text-gray-500 h-10 px-3 py-2 rounded-l-lg border border-r-0 border-gray-300 whitespace-nowrap text-sm">
                    https://www.khaircharity.com/
                  </div>
                  <input
                    type="text"
                    value={editData.customUrl}
                    onChange={(e) => {
                      const value = e.target.value.toLowerCase().replace(/[^a-z0-9]/g, '');
                      setEditData(prev => ({ ...prev, customUrl: value }));
                      setUrlError('');
                    }}
                    className="flex-1 px-3 w-full py-2 border h-10 border-gray-300 rounded-r-lg rounded-l-none focus:ring-[#998966] focus:border-[#998966]"
                  />
                </div>
                {urlError && <p className="mt-1 text-sm text-red-500">{urlError}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Donation Options</label>
                <DonationChoicesEditor
                  choices={editData.donationChoices}
                  onChange={(newChoices) => setEditData(prev => ({
                    ...prev,
                    donationChoices: newChoices
                  }))}
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={handleEdit}
                  className={`bg-[#998966] text-white px-6 py-2 rounded-lg transition-opacity ${isEditing ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'}`}
                  disabled={isEditing}
                >
                  {isEditing ? 'Saving...' : 'Save'}
                </button>
                <button
                  onClick={() => setIsEditModalOpen(false)}
                  className="bg-gray-200 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-300"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </motion.div>
      )}

      {isDeleteModalOpen && (
        <motion.div
          initial="hidden"
          animate="visible"
          exit="exit"
          variants={modalVariants}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        >
          <div className="bg-white p-6 rounded-lg w-full max-w-md">
            <h3 className="text-xl font-semibold mb-4">Confirm Deletion</h3>
            <p className="mb-4">Are you sure you want to delete this organization?</p>
            <div className="flex space-x-4">
              <button
                onClick={handleDelete}
                className={`bg-red-500 text-white px-6 py-2 rounded-lg transition-opacity ${isDeleting ? 'opacity-50 cursor-not-allowed' : 'hover:bg-red-600'}`}
                disabled={isDeleting}
              >
                {isDeleting ? 'Deleting...' : 'Delete'}
              </button>
              <button
                onClick={() => setIsDeleteModalOpen(false)}
                className="bg-gray-200 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-300"
              >
                Cancel
              </button>
            </div>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
}
</file>

<file path="app/admin/_components/OrgCardSkeleton.js">
export default function OrgCardSkeleton() {
  return (
    <div className="bg-white rounded-lg shadow-md p-6 animate-pulse" dir="rtl">
      <div className="flex items-center space-x-reverse space-x-4 mb-4">
        <div className="w-16 h-16 bg-gray-200 rounded-full"></div>
        <div className="space-y-2 flex-1">
          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
          <div className="h-3 bg-gray-200 rounded w-1/2"></div>
        </div>
      </div>

      <div className="space-y-3">
        <div className="flex justify-between">
          <div className="h-4 bg-gray-200 rounded w-1/3"></div>
          <div className="h-4 bg-gray-200 rounded w-1/4"></div>
        </div>
        <div className="flex justify-between">
          <div className="h-4 bg-gray-200 rounded w-1/4"></div>
          <div className="h-4 bg-gray-200 rounded w-1/5"></div>
        </div>
      </div>

      <div className="mt-4 flex space-x-reverse space-x-2">
        <div className="h-8 bg-gray-200 rounded w-24"></div>
        <div className="h-8 bg-gray-200 rounded w-20"></div>
        <div className="h-8 bg-gray-200 rounded w-16"></div>
      </div>

      <div className="mt-4 space-y-3">
        <div className="h-4 bg-gray-200 rounded w-1/3"></div>
        <div className="space-y-2">
          <div className="h-10 bg-gray-200 rounded"></div>
          <div className="h-10 bg-gray-200 rounded"></div>
          <div className="h-10 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="app/admin/_components/Sidebar.js">
'use client';
import { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import Image from 'next/image';
import { ChevronDown, ChevronUp, LogOut, Users } from 'lucide-react';
import { 
  Building2, 
  BarChart3,
  Trees,
  X
} from 'lucide-react';

export default function Sidebar({ onSignOut, isOpen, onClose, isMobile }) {
  const pathname = usePathname();
  const [orgExpanded, setOrgExpanded] = useState(true);
  const [farmsExpanded, setFarmsExpanded] = useState(false);

  const isActive = (path) => pathname === path;

  const handleLinkClick = () => {
    if (isMobile) {
      onClose();
    }
  };

  return (
    <div className={`
      fixed top-0 left-0 h-screen bg-white shadow-lg z-40
      transition-transform duration-300 ease-in-out
      w-64 transform
      ${isOpen ? 'translate-x-0' : '-translate-x-full'}
      flex flex-col
    `}>
      {/* Close button for mobile */}
      {isMobile && (
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
        >
          <X size={24} />
        </button>
      )}

      {/* Logo Section */}
      <div className="p-4 border-b">
        <Image 
          width={367}
          height={127}
          src="/logo.png" 
          alt="Logo" 
          className="h-8 w-auto mx-auto"
          priority
        />
      </div>

      {/* Navigation Section */}
      <div className="flex-1 overflow-y-auto p-4 scrollbar-thin scrollbar-thumb-gray-200">
        {/* Organizations Management Section */}
        <div className="mb-4">
          <button
            onClick={() => setOrgExpanded(!orgExpanded)}
            className="w-full flex items-center justify-between p-2 text-[#998966] hover:bg-[#f8f7f8] rounded-lg transition-colors"
          >
            <div className="flex items-center space-x-2">
              <Building2 size={20} />
              <span>Organizations</span>
            </div>
            {orgExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
          </button>
          
          {orgExpanded && (
            <div className="ml-4 mt-2 space-y-2">
              <Link
                href="/admin"
                prefetch={true}
                onClick={handleLinkClick}
                className={`flex items-center space-x-2 p-2 rounded-lg transition-colors ${
                  isActive('/admin') ? 'bg-[#998966] text-white' : 'text-gray-600 hover:bg-[#f8f7f8]'
                }`}
              >
                <Building2 size={18} />
                <span>Organizations</span>
              </Link>
              <Link
                href="/admin/analytics"
                prefetch={true}
                onClick={handleLinkClick}
                className={`flex items-center space-x-2 p-2 rounded-lg transition-colors ${
                  isActive('/admin/analytics') ? 'bg-[#998966] text-white' : 'text-gray-600 hover:bg-[#f8f7f8]'
                }`}
              >
                <BarChart3 size={18} />
                <span>Analytics</span>
              </Link>
            </div>
          )}
        </div>

        {/* Farms Management Section */}
        <div className="mb-4">
          <button
            onClick={() => setFarmsExpanded(!farmsExpanded)}
            className="w-full flex items-center justify-between p-2 text-[#998966] hover:bg-[#f8f7f8] rounded-lg transition-colors"
          >
            <div className="flex items-center space-x-2">
              <Trees size={20} />
              <span>Farmers Management</span>
            </div>
            {farmsExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
          </button>
          
          {farmsExpanded && (
            <div className="ml-4 mt-2 space-y-2">
              <Link
                href="/admin/farmers"
                prefetch={true}
                onClick={handleLinkClick}
                className={`flex items-center space-x-2 p-2 rounded-lg transition-colors ${
                  isActive('/admin/farmers') ? 'bg-[#998966] text-white' : 'text-gray-600 hover:bg-[#f8f7f8]'
                }`}
              >
                <Trees size={18} />
                <span>Farmers</span>
              </Link>
              <Link
                href="/admin/farmers/analytics"
                prefetch={true}
                onClick={handleLinkClick}
                className={`flex items-center space-x-2 p-2 rounded-lg transition-colors ${
                  isActive('/admin/farmers/analytics') ? 'bg-[#998966] text-white' : 'text-gray-600 hover:bg-[#f8f7f8]'
                }`}
              >
                <BarChart3 size={18} />
                <span>Analytics</span>
              </Link>
            </div>
          )}
        </div>
      </div>

      {/* Bottom Actions */}
      <div className="p-4 border-t space-y-2 bg-white">
        <Link
          href="/admin/users"
          prefetch={true}
          onClick={handleLinkClick}
          className="flex items-center space-x-2 p-2 text-[#998966] hover:bg-[#f8f7f8] rounded-lg w-full transition-colors"
        >
          <Users size={20} />
          <span>User Management</span>
        </Link>
        <button
          onClick={onSignOut}
          className="flex items-center space-x-2 p-2 text-red-500 hover:bg-red-50 rounded-lg w-full transition-colors"
        >
          <LogOut size={20} />
          <span>Sign Out</span>
        </button>
      </div>
    </div>
  );
}
</file>

<file path="app/admin/analytics/_components/AnalyticsClient.js">
'use client';

import { useState, useEffect, useRef, useMemo } from 'react';
import { getAllDonations } from '@/app/actions/donations';
import Chart from 'chart.js/auto';
import { formatDistanceToNow, format, startOfMonth, endOfMonth, parseISO } from 'date-fns';
import { enUS } from 'date-fns/locale';
import debounce from 'lodash/debounce';
import { motion } from 'framer-motion';

export default function AnalyticsClient({ initialOrganizations, initialDonations, initialMonth }) {
  const [selectedMonth, setSelectedMonth] = useState(initialMonth);
  const [isLoading, setIsLoading] = useState(false);
  const chartRef = useRef(null);
  const chartInstance = useRef(null);
  const [isMobileView, setIsMobileView] = useState(false);
  const [donationCache, setDonationCache] = useState({
    [initialMonth]: initialDonations
  });

  // Define available months statically (last 12 months)
  const availableMonths = useMemo(() => {
    const months = [];
    const currentDate = new Date();
    for (let i = 0; i < 12; i++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
      months.push(format(date, 'yyyy-MM'));
    }
    return months;
  }, []);

  // Filter donations for selected month with memoization
  const monthDonations = useMemo(() => {
    return donationCache[selectedMonth] ? donationCache[selectedMonth].filter(d => {
      const donationDate = parseISO(d.createdAt);
      const start = startOfMonth(new Date(selectedMonth));
      const end = endOfMonth(new Date(selectedMonth));
      return donationDate >= start && donationDate <= end;
    }) : [];
  }, [donationCache, selectedMonth]);

  // Calculate statistics with memoization
  const statistics = useMemo(() => ({
    totalAmount: monthDonations.reduce((sum, d) => sum + d.amount, 0),
    totalCount: monthDonations.length,
    averageAmount: monthDonations.length ? 
      Math.round(monthDonations.reduce((sum, d) => sum + d.amount, 0) / monthDonations.length) : 0,
    uniqueDonors: new Set(monthDonations.map(d => d.phoneNumber)).size,
    peakDay: monthDonations.length ? format(
      parseISO(monthDonations.reduce((max, d) => 
        max.amount > d.amount ? max : d
      ).createdAt),
      'MM/dd/yyyy',
      { locale: enUS }
    ) : '-'
  }), [monthDonations]);

  // Calculate organization rankings with memoization
  const orgRankings = useMemo(() => {
    return Object.entries(monthDonations.reduce((acc, donation) => {
      const orgId = donation.PK.split('#')[1];
      if (!acc[orgId]) {
        acc[orgId] = { amount: 0, count: 0 };
      }
      acc[orgId].amount += donation.amount;
      acc[orgId].count += 1;
      return acc;
    }, {}))
    .map(([orgId, stats]) => ({
      orgId,
      name: initialOrganizations.find(org => org.SK.split('#')[1] === orgId)?.name || 'Unknown',
      ...stats
    }))
    .sort((a, b) => b.amount - a.amount);
  }, [monthDonations, initialOrganizations]);

  // Fetch donations with error handling and loading state
  const fetchDonations = async () => {
    if (donationCache[selectedMonth]) {
      createOrUpdateChart(donationCache[selectedMonth]);
      return;
    }

    try {
      setIsLoading(true);
      const [year, monthNum] = selectedMonth.split('-').map(Number);
      const start = new Date(year, monthNum - 1, 1);
      const end = new Date(year, monthNum, 0);
      const donations = await getAllDonations(start, end);
      
      setDonationCache(prev => ({
        ...prev,
        [selectedMonth]: donations
      }));
      
      createOrUpdateChart(donations);
    } catch (error) {
      console.error('Error fetching donations:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Effect to fetch data when selectedMonth changes
  useEffect(() => {
    if (donationCache[selectedMonth]) {
      createOrUpdateChart(donationCache[selectedMonth]);
    } else {
      fetchDonations();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedMonth]);

  // Add isMobileView to dependencies
  useEffect(() => {
    const checkMobile = () => {
      setIsMobileView(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Memoize the chart creation/update function
  const createOrUpdateChart = useRef((allDonations) => {
    // Process data for chart
    const orgDonations = {};
    initialOrganizations.forEach(org => {
      const orgId = org.SK.split('#')[1];
      orgDonations[orgId] = {
        name: org.name,
        data: {}
      };
    });

    // Find the date range from actual donations
    let minDate = new Date();
    let maxDate = new Date(0);
    
    allDonations.forEach(donation => {
      const date = new Date(donation.createdAt);
      if (date < minDate) minDate = date;
      if (date > maxDate) maxDate = date;
    });

    // Only add padding days if we have less than 5 days of data
    const daySpan = Math.ceil((maxDate - minDate) / (1000 * 60 * 60 * 24));
    if (daySpan < 5) {
      minDate.setDate(minDate.getDate() - 2);
      maxDate.setDate(maxDate.getDate() + 3);
    }

    // Calculate ideal number of points for the date range
    const getIdealPoints = () => {
      if (!isMobileView) return daySpan;
      return 5;
    };

    // Create evenly spaced dates
    const createEvenlySpacedDates = () => {
      const numberOfPoints = getIdealPoints();
      const step = Math.max(1, Math.floor(daySpan / (numberOfPoints - 1)));
      const dates = [];
      
      dates.push(format(minDate, 'yyyy-MM-dd', { locale: enUS }));

      for (let i = step; i < daySpan; i += step) {
        const date = new Date(minDate);
        date.setDate(minDate.getDate() + i);
        if (date < maxDate) {
          dates.push(format(date, 'yyyy-MM-dd', { locale: enUS }));
        }
      }
      
      dates.push(format(maxDate, 'yyyy-MM-dd', { locale: enUS }));

      return dates;
    };

    const dates = createEvenlySpacedDates();

    // Modify the aggregateDailyData function
    const aggregateDailyData = (data) => {
      const aggregated = {};
      const sortedDates = Object.keys(data).sort();
      
      if (sortedDates.length === 0) return aggregated;

      dates.forEach((targetDate, index) => {
        const targetDateObj = parseISO(targetDate);
        let sum = 0;
        
        const nextTargetDate = index < dates.length - 1 ? 
          parseISO(dates[index + 1]) : 
          new Date(maxDate.getTime() + 86400000);
        
        Object.entries(data).forEach(([dateStr, value]) => {
          const date = parseISO(dateStr);
          if (date >= targetDateObj && date < nextTargetDate) {
            sum += value;
          }
        });
        
        aggregated[targetDate] = sum;
      });

      return aggregated;
    };

    const datesFormatted = dates.map(dateStr => format(parseISO(dateStr), 'yyyy-MM-dd', { locale: enUS }));
    const chartDates = dates.map(dateStr => 
      format(parseISO(dateStr), 'MM/dd', { locale: enUS })
    );

    // Group donations by organization and date
    allDonations.forEach(donation => {
      const date = format(parseISO(donation.createdAt), 'yyyy-MM-dd', { locale: enUS });
      const orgId = donation.PK.split('#')[1];
      if (orgDonations[orgId]) {
        if (!orgDonations[orgId].data[date]) {
          orgDonations[orgId].data[date] = 0;
        }
        orgDonations[orgId].data[date] += donation.amount;
      }
    });

    const config = {
      type: 'line',
      data: {
        labels: chartDates,
        datasets: Object.entries(orgDonations).map(([orgId, orgData], index) => {
          const aggregatedData = isMobileView ? 
            aggregateDailyData(orgData.data) : 
            orgData.data;

          return {
            label: orgData.name,
            data: datesFormatted.map(date => aggregatedData[date] || 0),
            borderColor: `hsl(${(index * 360) / Object.keys(orgDonations).length}, 70%, 50%)`,
            backgroundColor: `hsla(${(index * 360) / Object.keys(orgDonations).length}, 70%, 50%, 0.1)`,
            tension: isMobileView ? 0.3 : 0.4,
            fill: true,
            pointRadius: isMobileView ? 3 : 4,
            borderWidth: isMobileView ? 2 : 3,
            spanGaps: true,
            pointHoverRadius: isMobileView ? 4 : 6,
            showLine: true,
            pointStyle: isMobileView ? 'circle' : 'circle',
          };
        })
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: {
          duration: 1000,
          easing: 'easeOutQuart',
        },
        plugins: {
          legend: {
            position: isMobileView ? 'bottom' : 'top',
            rtl: false,
            labels: {
              boxWidth: isMobileView ? 12 : 20,
              padding: isMobileView ? 8 : 15,
              font: {
                size: isMobileView ? 8 : 12,
                family: 'Arial'
              },
              generateLabels: (chart) => {
                const originalLabels = Chart.defaults.plugins.legend.labels.generateLabels(chart);
                return originalLabels.map(label => ({
                  ...label,
                  text: isMobileView ? 
                    label.text.substring(0, 12) + (label.text.length > 12 ? '...' : '') :
                    label.text,
                  fillStyle: label.strokeStyle,
                  lineWidth: 0,
                  strokeStyle: label.strokeStyle,
                }));
              },
            },
            maxHeight: isMobileView ? 50 : 200,
          },
          title: {
            display: true,
            font: {
              size: isMobileView ? 14 : 16,
              family: 'Arial'
            },
            padding: {
              top: 10,
              bottom: 10
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              font: {
                size: isMobileView ? 8 : 12
              },
              callback: function(value) {
                if (isMobileView) {
                  if (value >= 1000000) {
                    return (value / 1000000).toFixed(1) + 'M';
                  }
                  if (value >= 1000) {
                    return (value / 1000).toFixed(0) + 'K';
                  }
                }
                return value.toLocaleString('en-US');
              },
              maxTicksLimit: isMobileView ? 4 : 8
            },
            grid: {
              display: !isMobileView,
              drawBorder: true,
              color: 'rgba(0, 0, 0, 0.1)',
              lineWidth: 0.5
            }
          },
          x: {
            ticks: {
              maxRotation: isMobileView ? 0 : 45,
              minRotation: isMobileView ? 0 : 45,
              font: {
                size: isMobileView ? 8 : 12
              },
            },
            grid: {
              display: !isMobileView
            }
          }
        },
        layout: {
          padding: {
            top: isMobileView ? 5 : 10,
            right: isMobileView ? 2 : 10,
            bottom: isMobileView ? 5 : 20,
            left: isMobileView ? 2 : 10
          }
        },
        elements: {
          point: {
            radius: isMobileView ? 3 : 3,
            hoverRadius: isMobileView ? 4 : 6,
            borderWidth: isMobileView ? 1 : 2,
          },
          line: {
            tension: isMobileView ? 0.4 : 0.4,
            borderWidth: isMobileView ? 1.5 : 3,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
      }
    };

    if (chartInstance.current) {
      chartInstance.current.data = config.data;
      chartInstance.current.options.animation = config.options.animation;
      chartInstance.current.update();
    } else {
      chartInstance.current = new Chart(chartRef.current, config);
    }
  }).current;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="space-y-8"
    >
      {/* Month Selection */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-xl font-semibold text-gray-800">Donation Statistics</h3>
          <div className="flex items-center gap-4">
            <button
              onClick={fetchDonations}
              className="text-[#998966] hover:text-gray-700 transition-colors"
              disabled={isLoading}
            >
              {isLoading ? (
                <span className="inline-block animate-spin">⟳</span>
              ) : (
                <span>⟳</span>
              )}
            </button>
            <select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
            >
              {availableMonths.map(month => (
                <option key={month} value={month}>
                  {format(parseISO(`${month}-01`), 'MMMM yyyy', { locale: enUS })}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Statistics Cards */}
        {isLoading ? (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            {Array.from({ length: 4 }).map((_, index) => (
              <div key={index} className="bg-[#f8f7f8] p-4 rounded-lg animate-pulse">
                <div className="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                <div className="h-6 bg-gray-300 rounded w-1/2"></div>
              </div>
            ))}
          </div>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-[#f8f7f8] p-4 rounded-lg">
              <h4 className="text-sm text-gray-600 mb-2">Total Donations</h4>
              <p className="text-2xl font-bold text-[#998966]">
                ${statistics.totalAmount.toLocaleString('en-US')}
              </p>
            </div>
            <div className="bg-[#f8f7f8] p-4 rounded-lg">
              <h4 className="text-sm text-gray-600 mb-2">Number of Donations</h4>
              <p className="text-2xl font-bold text-[#998966]">
                {statistics.totalCount.toLocaleString('en-US')}
              </p>
            </div>
            <div className="bg-[#f8f7f8] p-4 rounded-lg">
              <h4 className="text-sm text-gray-600 mb-2">Average Donation</h4>
              <p className="text-2xl font-bold text-[#998966]">
                ${statistics.averageAmount.toLocaleString('en-US')}
              </p>
            </div>
            <div className="bg-[#f8f7f8] p-4 rounded-lg">
              <h4 className="text-sm text-gray-600 mb-2">Unique Donors</h4>
              <p className="text-2xl font-bold text-[#998966]">
                {statistics.uniqueDonors.toLocaleString('en-US')}
              </p>
            </div>
          </div>
        )}

        {/* Chart - Increased height */}
        <div className={`${isMobileView ? 'h-[300px]' : 'h-[350px]'} relative`}>
          {isLoading && (
            <div className="absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 rounded-lg">
              <span className="text-gray-500">Loading chart...</span>
            </div>
          )}
          <canvas ref={chartRef}></canvas>
        </div>
      </div>

      {/* Organization Rankings */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h4 className="text-lg font-semibold mb-4 text-gray-800">Organization Rankings</h4>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Rank</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Organization</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Total Donations</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Number of Donations</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Average Donation</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {orgRankings.map((org, index) => (
                <tr key={org.orgId} className="hover:bg-gray-50">
                  <td className="px-4 py-3 text-left text-sm">{index + 1}</td>
                  <td className="px-4 py-3 text-left text-sm font-medium">{org.name}</td>
                  <td className="px-4 py-3 text-left text-sm">
                    ${org.amount.toLocaleString('en-US')}
                  </td>
                  <td className="px-4 py-3 text-left text-sm">
                    {org.count.toLocaleString('en-US')}
                  </td>
                  <td className="px-4 py-3 text-left text-sm">
                    ${Math.round(org.amount / org.count).toLocaleString('en-US')}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Donations Log */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex justify-between items-center mb-4">
          <h4 className="text-lg font-semibold text-gray-800">Donations Log</h4>
          {isLoading && (
            <span className="text-sm text-gray-500">Updating...</span>
          )}
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Organization</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Phone Number</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Amount</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Date</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {monthDonations
                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                .slice(0, 50)
                .map(donation => {
                  const orgId = donation.PK.split('#')[1];
                  const org = initialOrganizations.find(o => o.SK.split('#')[1] === orgId);
                  return (
                    <tr key={donation.SK} className="hover:bg-gray-50">
                      <td className="px-4 py-3 text-left text-sm">
                        <span className="truncate max-w-[200px] inline-block">
                          {org?.name || 'Unknown'}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-left text-sm">
                        {donation.phoneNumber}
                      </td>
                      <td className="px-4 py-3 text-left text-sm">
                        ${donation.amount.toLocaleString('en-US')}
                      </td>
                      <td className="px-4 py-3 text-left text-sm">
                        {format(parseISO(donation.createdAt), 'MM/dd/yyyy HH:mm', { locale: enUS })}
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="app/admin/analytics/page.js">
import { Suspense } from 'react';
import { getAllOrganizations } from '@/app/actions/organizations';
import { getAllDonations } from '@/app/actions/donations';
import AnalyticsClient from './_components/AnalyticsClient';
import AnalyticsTabSkeleton from '../_components/AnalyticsTabSkeleton';
import ExportDonationsButton from '../_components/ExportDonationsButton';

async function AnalyticsPage() {
  const organizations = await getAllOrganizations();
  
  // Get current month's data
  const now = new Date();
  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
  const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
  
  // Pre-fetch initial month's donations
  const initialDonations = await getAllDonations(startOfMonth, endOfMonth);

  return (
    <div className="min-h-screen space-y-6" dir="ltr">
      <div className="h-16 flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-900">Donations Log</h2>
        <ExportDonationsButton />
      </div>

      <Suspense fallback={<AnalyticsTabSkeleton />}>
        <AnalyticsClient 
          initialOrganizations={organizations} 
          initialDonations={initialDonations}
          initialMonth={`${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`}
        />
      </Suspense>
    </div>
  );
}

export default AnalyticsPage;
</file>

<file path="app/admin/farmers/_components/FarmersManagementClient.js">
'use client';

import { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Image from 'next/image';
import { format, parseISO } from 'date-fns';
import { Grid, List, Download, X, Search } from 'lucide-react';

export default function FarmersManagementClient({ initialDonations }) {
  const [selectedType, setSelectedType] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState(() => {
    if (typeof window !== 'undefined') {
      return window.innerWidth < 768 ? 'grid' : 'table';
    }
    return 'grid';
  });
  const [selectedDonation, setSelectedDonation] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);

  const filteredDonations = useMemo(() => {
    return initialDonations.filter(donation => {
      const matchesType = selectedType === 'all' || donation.donationType === selectedType;
      const matchesSearch = 
        donation.donorName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        donation.phoneNumber.includes(searchTerm);
      
      return matchesType && matchesSearch;
    });
  }, [initialDonations, selectedType, searchTerm]);

  const handleImageDownload = async (imageUrl) => {
    try {
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `image-${Date.now()}.jpg`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error downloading image:', error);
      alert('Error downloading image');
    }
  };

  return (
    <div className="space-y-6">
      {/* Filters */}
      <div className="bg-white rounded-lg shadow-lg p-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex flex-1 md:flex-none md:w-1/2 gap-4">
            {/* Search with count - 2/3 width */}
            <div className="relative flex-[2]">
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full h-10 pl-10 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
              />
              <span className="absolute right-3 top-1/2 -translate-y-1/2 text-sm text-gray-500 bg-white px-2">
                {filteredDonations.length} donations
              </span>
            </div>

            {/* Type Filter - 1/3 width */}
            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value)}
              className="h-10 flex-1 px-4 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
            >
              <option value="all">All Types</option>
              <option value="zakat">Zakat</option>
              <option value="sadaqah">Sadaqah</option>
              <option value="gift">Gift</option>
            </select>
          </div>

          {/* View Toggle - Fixed width pill */}
          <div className="inline-flex bg-gray-100 h-10 p-1 rounded-lg items-center sm:ml-auto self-center">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-2 rounded-md transition-colors ${
                viewMode === 'grid' 
                  ? 'bg-white text-[#998966] shadow-sm' 
                  : 'text-gray-500 hover:text-[#998966]'
              }`}
              title="Grid view"
            >
              <Grid size={20} />
            </button>
            <button
              onClick={() => setViewMode('table')}
              className={`p-2 rounded-md transition-colors ${
                viewMode === 'table' 
                  ? 'bg-white text-[#998966] shadow-sm' 
                  : 'text-gray-500 hover:text-[#998966]'
              }`}
              title="Table view"
            >
              <List size={20} />
            </button>
          </div>
        </div>
      </div>

      {/* Content */}
      {viewMode === 'grid' ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {filteredDonations.map((donation) => (
            <motion.div
              key={donation.SK}
              layout
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="bg-white rounded-lg shadow-lg overflow-hidden"
            >
              <div className="p-4 flex flex-col h-full">
                <div className="flex-1">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h3 className="font-semibold text-lg">{donation.donorName}</h3>
                      <p className="text-sm text-gray-600">{donation.phoneNumber}</p>
                    </div>
                    <span className="px-3 py-1 bg-[#f8f7f8] text-[#998966] rounded-full text-sm">
                      {donation.donationType}
                    </span>
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Quantity:</span>
                      <span className="font-medium text-right">{donation.quantity} kg</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Date:</span>
                      <span className="font-medium">
                        {format(parseISO(donation.createdAt), 'MM/dd/yyyy')}
                      </span>
                    </div>
                  </div>
                </div>

                <button
                  onClick={() => {
                    setSelectedDonation(donation);
                    setIsModalOpen(true);
                  }}
                  className="mt-4 text-[#998966] hover:bg-[#f8f7f8] px-4 py-2 rounded-lg transition-colors w-full"
                >
                  View Details
                </button>
              </div>
            </motion.div>
          ))}
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500">Donor</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500">Phone</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500">Type</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500">Quantity</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500">Date</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredDonations.map((donation) => (
                  <tr key={donation.SK} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="font-medium">{donation.donorName}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">{donation.phoneNumber}</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-3 py-1 bg-[#f8f7f8] text-[#998966] rounded-full text-sm">
                        {donation.donationType}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">{donation.quantity} kg</td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {format(parseISO(donation.createdAt), 'MM/dd/yyyy')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <button
                        onClick={() => {
                          setSelectedDonation(donation);
                          setIsModalOpen(true);
                        }}
                        className="text-[#998966] hover:text-gray-700"
                      >
                        View Details
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Details Modal */}
      <AnimatePresence>
        {isModalOpen && selectedDonation && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.95 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0.95 }}
              className="bg-white rounded-lg w-full max-w-2xl overflow-hidden"
            >
              <div className="p-6">
                <div className="flex justify-between items-start mb-6">
                  <h3 className="text-xl font-semibold">Donation Details</h3>
                  <button
                    onClick={() => {
                      setIsModalOpen(false);
                      setSelectedImage(null);
                    }}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    <X size={24} />
                  </button>
                </div>

                {/* Donation Details */}
                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div>
                    <label className="text-sm text-gray-600">Donor Name</label>
                    <p className="font-medium">{selectedDonation.donorName}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Phone Number</label>
                    <p className="font-medium">{selectedDonation.phoneNumber}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Donation Type</label>
                    <p className="font-medium">{selectedDonation.donationType}</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Quantity</label>
                    <p className="font-medium">{selectedDonation.quantity} kg</p>
                  </div>
                  <div>
                    <label className="text-sm text-gray-600">Date</label>
                    <p className="font-medium">
                      {format(parseISO(selectedDonation.createdAt), 'MM/dd/yyyy')}
                    </p>
                  </div>
                </div>

                {/* Image Gallery */}
                {selectedDonation.images?.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold mb-4">Images</h4>
                    <div className="grid grid-cols-3 gap-4">
                      {selectedDonation.images.map((image, index) => (
                        <div key={index} className="relative group">
                          <div className="relative h-24 rounded-lg overflow-hidden">
                            <Image
                              src={image}
                              alt={`Image ${index + 1}`}
                              fill
                              className="object-cover cursor-pointer transition-transform group-hover:scale-105"
                              onClick={() => setSelectedImage(image)}
                            />
                          </div>
                          <button
                            onClick={() => handleImageDownload(image)}
                            className="absolute top-1 right-1 p-1 bg-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                            title="Download Image"
                          >
                            <Download size={16} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Full Image Modal */}
      <AnimatePresence>
        {selectedImage && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4"
            onClick={() => setSelectedImage(null)}
          >
            <div className="relative max-w-4xl max-h-[90vh] w-full h-full">
              <Image
                src={selectedImage}
                alt="Full size image"
                fill
                className="object-contain"
              />
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  handleImageDownload(selectedImage);
                }}
                className="absolute top-4 right-4 p-2 bg-white rounded-full text-gray-800 hover:bg-gray-100"
                title="Download Image"
              >
                <Download size={20} />
              </button>
              <button
                onClick={() => setSelectedImage(null)}
                className="absolute top-4 left-4 p-2 bg-white rounded-full text-gray-800 hover:bg-gray-100"
              >
                <X size={20} />
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="app/admin/farmers/_components/FarmersManagementSkeleton.js">
export default function FarmersManagementSkeleton() {
  return (
    <div className="space-y-6">
      {/* Filters Skeleton */}
      <div className="bg-white rounded-lg shadow-lg p-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="h-10 bg-gray-200 rounded-lg animate-pulse"></div>
          ))}
        </div>
      </div>

      {/* Content Skeleton */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(6)].map((_, i) => (
          <div key={i} className="bg-white rounded-lg shadow-lg overflow-hidden">
            {/* Image Skeleton */}
            <div className="h-48 bg-gray-200 animate-pulse"></div>

            {/* Content Skeleton */}
            <div className="p-4 space-y-4">
              <div className="flex justify-between items-start">
                <div className="space-y-2">
                  <div className="h-6 w-32 bg-gray-200 rounded animate-pulse"></div>
                  <div className="h-4 w-24 bg-gray-200 rounded animate-pulse"></div>
                </div>
                <div className="h-6 w-20 bg-gray-200 rounded-full animate-pulse"></div>
              </div>

              <div className="space-y-2">
                {[...Array(3)].map((_, j) => (
                  <div key={j} className="flex justify-between">
                    <div className="h-4 w-16 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-4 w-24 bg-gray-200 rounded animate-pulse"></div>
                  </div>
                ))}
              </div>

              <div className="h-10 bg-gray-200 rounded-lg animate-pulse"></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="app/admin/farmers/analytics/_components/FarmersAnalyticsClient.js">
'use client';

import { useState, useEffect, useRef, useMemo } from 'react';
import { motion } from 'framer-motion';
import Chart from 'chart.js/auto';
import { format, parseISO, startOfMonth, endOfMonth } from 'date-fns';

export default function FarmersAnalyticsClient({ initialDonations }) {
  const [selectedMonth, setSelectedMonth] = useState(() => {
    const now = new Date();
    return format(now, 'yyyy-MM');
  });
  const [isMobileView, setIsMobileView] = useState(false);
  const pieChartRef = useRef(null);
  const barChartRef = useRef(null);
  const pieChartInstance = useRef(null);
  const barChartInstance = useRef(null);

  // Define available months
  const availableMonths = useMemo(() => {
    const months = [];
    const currentDate = new Date();
    for (let i = 0; i < 12; i++) {
      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
      months.push(format(date, 'yyyy-MM'));
    }
    return months;
  }, []);

  // Filter donations for selected month
  const monthDonations = useMemo(() => {
    return initialDonations.filter(d => {
      const donationDate = parseISO(d.createdAt);
      const start = startOfMonth(new Date(selectedMonth));
      const end = endOfMonth(new Date(selectedMonth));
      return donationDate >= start && donationDate <= end;
    });
  }, [initialDonations, selectedMonth]);

  // Calculate statistics
  const statistics = useMemo(() => ({
    totalQuantity: monthDonations.reduce((sum, d) => sum + d.quantity, 0),
    totalDonors: new Set(monthDonations.map(d => d.phoneNumber)).size,
    averageQuantity: monthDonations.length ? 
      Math.round(monthDonations.reduce((sum, d) => sum + d.quantity, 0) / monthDonations.length) : 0,
    byType: monthDonations.reduce((acc, d) => {
      acc[d.donationType] = (acc[d.donationType] || 0) + d.quantity;
      return acc;
    }, {}),
    // Group donations by day for the bar chart
    byDay: monthDonations.reduce((acc, d) => {
      const day = format(parseISO(d.createdAt), 'yyyy-MM-dd');
      acc[day] = (acc[day] || 0) + d.quantity;
      return acc;
    }, {})
  }), [monthDonations]);

  // Create/update charts
  useEffect(() => {
    const createCharts = () => {
      if (pieChartInstance.current) {
        pieChartInstance.current.destroy();
      }
      if (barChartInstance.current) {
        barChartInstance.current.destroy();
      }

      const pieCtx = pieChartRef.current.getContext('2d');
      
      // Check if there's data for pie chart
      if (Object.keys(statistics.byType).length === 0) {
        pieChartInstance.current = new Chart(pieCtx, {
          type: 'pie',
          data: {
            labels: ['No Data'],
            datasets: [{
              data: [1],
              backgroundColor: ['#E5E7EB'],
            }]
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                display: false
              },
              title: {
                display: true,
                text: 'Donations Distribution by Type',
                font: {
                  size: isMobileView ? 14 : 16,
                  family: 'Arial'
                }
              }
            }
          }
        });
      } else {
        // Create pie chart with data
        const typeData = {
          labels: Object.keys(statistics.byType).map(type => {
            const quantity = statistics.byType[type];
            return `${type} (${quantity} kg)`;
          }),
          datasets: [{
            data: Object.values(statistics.byType),
            backgroundColor: [
              'rgba(153, 137, 102, 0.8)',
              'rgba(75, 192, 192, 0.8)',
              'rgba(255, 159, 64, 0.8)'
            ]
          }]
        };

        pieChartInstance.current = new Chart(pieCtx, {
          type: 'pie',
          data: typeData,
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  font: {
                    size: isMobileView ? 10 : 12,
                    family: 'Arial'
                  }
                }
              },
              title: {
                display: true,
                text: 'Donations Distribution by Type',
                font: {
                  size: isMobileView ? 14 : 16,
                  family: 'Arial'
                }
              }
            }
          }
        });
      }

      // Create line chart with padding days
      const lineCtx = barChartRef.current.getContext('2d');
      let days = Object.keys(statistics.byDay).sort();
      let quantities = days.map(day => statistics.byDay[day]);

      // Add padding days if less than 3 days of data
      if (days.length > 0 && days.length < 3) {
        const firstDate = new Date(days[0]);
        const lastDate = new Date(days[days.length - 1]);

        // Add day before
        const dayBefore = new Date(firstDate);
        dayBefore.setDate(dayBefore.getDate() - 1);
        days.unshift(format(dayBefore, 'yyyy-MM-dd'));
        quantities.unshift(0);

        // Add day after
        const dayAfter = new Date(lastDate);
        dayAfter.setDate(dayAfter.getDate() + 1);
        days.push(format(dayAfter, 'yyyy-MM-dd'));
        quantities.push(0);
      }

      barChartInstance.current = new Chart(lineCtx, {
        type: 'line',
        data: {
          labels: days.map(day => format(parseISO(day), 'MM/dd')),
          datasets: [{
            label: 'Quantity (kg)',
            data: quantities,
            borderColor: 'rgba(153, 137, 102, 1)',
            backgroundColor: 'rgba(153, 137, 102, 0.1)',
            tension: 0.4,
            fill: true
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              display: false
            },
            title: {
              display: true,
              text: 'Daily Quantities',
              font: {
                size: isMobileView ? 14 : 16,
                family: 'Arial'
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: value => `${value} kg`
              }
            }
          }
        }
      });
    };

    createCharts();
  }, [statistics.byType, statistics.byDay, isMobileView]);

  // Handle mobile view
  useEffect(() => {
    const checkMobile = () => {
      setIsMobileView(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="space-y-8"
    >
      {/* Month Selection and Statistics Cards */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-xl font-semibold text-gray-800">Donation Statistics</h3>
          <select
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
          >
            {availableMonths.map(month => (
              <option key={month} value={month}>
                {format(parseISO(`${month}-01`), 'MMMM yyyy')}
              </option>
            ))}
          </select>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-[#f8f7f8] p-4 rounded-lg">
            <h4 className="text-sm text-gray-600 mb-2">Total Quantity</h4>
            <p className="text-2xl font-bold text-[#998966]">
              {statistics.totalQuantity.toLocaleString()} kg
            </p>
          </div>
          <div className="bg-[#f8f7f8] p-4 rounded-lg">
            <h4 className="text-sm text-gray-600 mb-2">Total Donors</h4>
            <p className="text-2xl font-bold text-[#998966]">
              {statistics.totalDonors.toLocaleString()}
            </p>
          </div>
          <div className="bg-[#f8f7f8] p-4 rounded-lg">
            <h4 className="text-sm text-gray-600 mb-2">Average Quantity</h4>
            <p className="text-2xl font-bold text-[#998966]">
              {statistics.averageQuantity.toLocaleString()} kg
            </p>
          </div>
        </div>

        {/* Charts - Updated layout */}
        <div className={`grid ${isMobileView ? 'grid-cols-1' : 'grid-cols-2'} gap-8`}>
          <div className="h-[300px] relative">
            <canvas ref={pieChartRef}></canvas>
          </div>
          <div className={`${isMobileView ? 'h-[200px]' : 'h-[300px]'} relative`}>
            <canvas ref={barChartRef}></canvas>
          </div>
        </div>
      </div>

      {/* Recent Donations Table */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h4 className="text-lg font-semibold mb-4 text-gray-800">Recent Donations</h4>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Donor</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Type</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Quantity</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Date</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {monthDonations
                .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                .slice(0, 100)
                .map(donation => (
                  <tr key={donation.SK} className="hover:bg-gray-50">
                    <td className="px-4 py-3 text-left text-sm">{donation.donorName}</td>
                    <td className="px-4 py-3 text-left text-sm">{donation.donationType}</td>
                    <td className="px-4 py-3 text-left text-sm">{donation.quantity} kg</td>
                    <td className="px-4 py-3 text-left text-sm">
                      {format(parseISO(donation.createdAt), 'MM/dd/yyyy')}
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      </div>
    </motion.div>
  );
}
</file>

<file path="app/admin/farmers/analytics/page.js">
import { Suspense } from 'react';
import { getDateDonations } from '@/app/actions/dateDonations';
import FarmersAnalyticsClient from './_components/FarmersAnalyticsClient';
import AnalyticsTabSkeleton from '../../_components/AnalyticsTabSkeleton';
import ExportFarmerDonationsButton from '../../_components/ExportFarmerDonationsButton';

async function FarmersAnalytics() {
  const donations = await getDateDonations();

  return (
    <div className="min-h-screen space-y-6">
      <div className="h-16 flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-900">Farmers Analytics</h2>
        <ExportFarmerDonationsButton />
      </div>

      <Suspense fallback={<AnalyticsTabSkeleton />}>
        <FarmersAnalyticsClient initialDonations={donations} />
      </Suspense>
    </div>
  );
}

export default FarmersAnalytics;
</file>

<file path="app/admin/farmers/page.js">
import { Suspense } from 'react';
import { getDateDonations } from '@/app/actions/dateDonations';
import FarmersManagementClient from './_components/FarmersManagementClient';
import FarmersManagementSkeleton from './_components/FarmersManagementSkeleton';
import Link from 'next/link';
import { ExternalLink } from 'lucide-react';

async function FarmersManagement() {
  const donations = await getDateDonations();

  return (
    <div className="min-h-screen space-y-6" dir="ltr">
      <div className="h-16 flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-900">Farmers</h2>
        <Link
          href="/farmers"
          target="_blank"
          className="flex items-center gap-2 px-4 py-2 bg-[#998966] text-white rounded-lg hover:opacity-90 transition-opacity"
        >
          <span>Open Form</span>
          <ExternalLink size={18} />
        </Link>
      </div>

      <Suspense fallback={<FarmersManagementSkeleton />}>
        <FarmersManagementClient initialDonations={donations} />
      </Suspense>
    </div>
  );
}

export default FarmersManagement;
</file>

<file path="app/admin/layout.js">
'use client';
import { useRouter } from 'next/navigation';
import { useState, useEffect } from 'react';
import Sidebar from './_components/Sidebar';
import { Menu } from 'lucide-react';

export default function AdminLayout({ children }) {
  const router = useRouter();
  const [isSidebarOpen, setSidebarOpen] = useState(true);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      const isMobileView = window.innerWidth < 1024;
      setIsMobile(isMobileView);
      setSidebarOpen(!isMobileView);
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const handleSignOut = () => {
    document.cookie = 'token=; path=/; max-age=0;';
    router.push('/login');
  };

  return (
    <div className="min-h-screen bg-[#f8f7f8]">
      {/* Mobile Menu Button */}
      <button
        onClick={() => setSidebarOpen(!isSidebarOpen)}
        className="lg:hidden fixed top-4 left-4 z-50 bg-white p-2 rounded-lg shadow-lg"
      >
        <Menu size={24} className="text-[#998966]" />
      </button>

      {/* Backdrop for mobile */}
      {isMobile && isSidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-30"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Sidebar */}
      <Sidebar 
        onSignOut={handleSignOut} 
        isOpen={isSidebarOpen} 
        onClose={() => setSidebarOpen(false)}
        isMobile={isMobile}
      />

      {/* Main Content */}
      <main className={`transition-all duration-300 ${
        isSidebarOpen ? 'lg:ml-64' : 'lg:ml-0'
      } p-4 lg:p-8 pt-16 lg:pt-8`}>
        {children}
      </main>
    </div>
  );
}
</file>

<file path="app/admin/page.js">
import { Suspense } from 'react';
import { getAllOrganizations } from '../actions/organizations';
import { getDonationsByOrg } from '../actions/donations';
import AdminDashboardClient from './_components/AdminDashboardClient';
import OrgCardSkeleton from './_components/OrgCardSkeleton';

async function AdminDashboard() {
  const organizations = await getAllOrganizations();

  const donationsMap = {};
  for (const org of organizations) {
    const orgId = org.SK.split('#')[1];
    donationsMap[orgId] = await getDonationsByOrg(orgId);
  }

  return (
    <div className="min-h-screen space-y-6" dir="ltr">
      <div className="h-16 flex justify-between items-center">
        <h2 className="text-2xl font-semibold text-gray-900">Organizations</h2>
        <Suspense>
          <AdminDashboardClient 
            initialOrganizations={organizations} 
            showOnlyButton={true} 
          />
        </Suspense>
      </div>

      <Suspense fallback={
        <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-6">
          {[...Array(6)].map((_, index) => (
            <OrgCardSkeleton key={index} />
          ))}
        </div>
      }>
        <AdminDashboardClient 
          initialOrganizations={organizations}
          initialDonationsMap={donationsMap}
          showOnlyContent={true} 
        />
      </Suspense>
    </div>
  );
}

export default AdminDashboard;
</file>

<file path="app/admin/users/_components/UserManagementClient.js">
'use client';

import { useState } from 'react';
import { sendUserInvitation } from '@/app/actions/users';
import Link from 'next/link';
import { FiArrowLeft, FiCopy, FiCheck } from 'react-icons/fi';

export default function UserManagementClient({ initialUsers }) {
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [users, setUsers] = useState(initialUsers);
  const [error, setError] = useState('');
  const [lastInviteLink, setLastInviteLink] = useState('');
  const [copyStatus, setCopyStatus] = useState({});

  const handleAddUser = async (e) => {
    e.preventDefault();
    setError('');
    setLastInviteLink('');

    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError('Please enter a valid email');
      return;
    }

    // Check if email already exists
    if (users.some(user => user.email === email)) {
      setError('Email already exists');
      return;
    }

    setIsSubmitting(true);

    try {
      const { token } = await sendUserInvitation(email);
      const inviteLink = `${window.location.origin}/setup-password?token=${token}`;
      setLastInviteLink(inviteLink);
      setEmail('');
      setUsers([...users, { email, inviteLink }]);
    } catch (error) {
      console.error('Error sending invitation:', error);
      alert('An error occurred while sending the invitation');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCopyLink = async (link, id) => {
    try {
      await navigator.clipboard.writeText(link);
      setCopyStatus({ [id]: true });
      setTimeout(() => setCopyStatus({ [id]: false }), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="min-h-screen p-6 bg-white rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold text-[#998966]">User Management</h2>
        <Link href="/admin" className="text-[#998966] hover:text-gray-700 transition-colors">
          <FiArrowLeft size={24} />
        </Link>
      </div>

      <form onSubmit={handleAddUser} className="space-y-4 mb-8">
        <div className="flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-2">
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full md:flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
            placeholder="Enter email address"
            required
          />
          <button
            type="submit"
            className={`w-full md:w-auto bg-[#998966] text-white px-6 py-2 rounded-lg transition-opacity ${isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'}`}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Sending...' : 'Add User'}
          </button>
        </div>
        {error && <p className="text-red-500 text-sm mt-2">{error}</p>}
      </form>

      {lastInviteLink && (
        <div className="mb-8 p-4 bg-green-50 border border-green-200 rounded-lg">
          <h3 className="text-green-800 font-semibold mb-2">Invitation sent successfully!</h3>
          <div className="flex items-center space-x-2 bg-white p-2 rounded border border-green-200">
            <input
              type="text"
              value={lastInviteLink}
              readOnly
              className="flex-1 bg-transparent border-none focus:ring-0 text-sm"
            />
            <button
              onClick={() => handleCopyLink(lastInviteLink, 'latest')}
              className="p-2 text-[#998966] hover:text-gray-700 transition-colors"
            >
              {copyStatus['latest'] ? <FiCheck /> : <FiCopy />}
            </button>
          </div>
        </div>
      )}

      <h3 className="text-lg font-semibold mb-4">Users List</h3>
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Email</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500">Invite Link</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {users.map((user, index) => (
              <tr key={user.email} className="hover:bg-gray-50">
                <td className="px-4 py-3 text-sm">{user.email}</td>
                <td className="px-4 py-3">
                  {user.inviteLink && (
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-500 truncate max-w-[50px]">
                        {user.inviteLink}
                      </span>
                      <button
                        onClick={() => handleCopyLink(user.inviteLink, index)}
                        className="p-1 text-[#998966] hover:text-gray-700 transition-colors"
                        title="Copy Link"
                      >
                        {copyStatus[index] ? <FiCheck /> : <FiCopy />}
                      </button>
                    </div>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
</file>

<file path="app/admin/users/page.js">
import { Suspense } from 'react';
import { getAllUsers } from '@/app/actions/users';
import UserManagementClient from './_components/UserManagementClient';

async function UserManagement() {
  // Fetch users server-side
  const users = await getAllUsers();

  return (
    <Suspense fallback={
      <div className="min-h-screen p-6 flex items-center justify-center">
        <div className="text-gray-500">Loading...</div>
      </div>
    }>
      <UserManagementClient initialUsers={users} />
    </Suspense>
  );
}

export default UserManagement;
</file>

<file path="app/api/auth/validate/route.js">
import { validateToken } from '@/app/actions/auth';
import { NextResponse } from 'next/server';

export async function GET(request) {
  try {
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json({ valid: false }, { status: 401 });
    }

    const token = authHeader.split(' ')[1];
    const result = await validateToken(token);

    return NextResponse.json(result);
  } catch (error) {
    console.error('Token validation error:', error);
    return NextResponse.json({ valid: false }, { status: 401 });
  }
}
</file>

<file path="app/api/revalidate/all/route.js">
import { revalidateTag, revalidatePath } from 'next/cache';
import { NextResponse } from 'next/server';

// All valid tags and paths
const VALID_TAGS = [
  'organizations',
  'donations',
  'datedonations',
  'users'
];

const VALID_PATHS = [
  '/',
  '/admin',
  '/admin/organizations',
  '/admin/donations',
  '/admin/date-donations',
  '/admin/users'
];

export async function POST(request) {
  try {
    // Verify secret
    const { secret } = await request.json();
    
    if (!secret || secret !== process.env.REVALIDATE_SECRET) {
      return NextResponse.json(
        { error: 'Invalid secret' },
        { status: 401 }
      );
    }

    // Revalidate all tags
    VALID_TAGS.forEach(tag => {
      try {
        revalidateTag(tag);
      } catch (error) {
        console.error(`Error revalidating tag ${tag}:`, error);
      }
    });

    // Revalidate all paths
    VALID_PATHS.forEach(path => {
      try {
        revalidatePath(path);
      } catch (error) {
        console.error(`Error revalidating path ${path}:`, error);
      }
    });

    return NextResponse.json({
      revalidated: true,
      tags: VALID_TAGS,
      paths: VALID_PATHS,
      timestamp: Date.now()
    });

  } catch (error) {
    console.error('Revalidation error:', error);
    return NextResponse.json(
      { error: 'Failed to revalidate' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/revalidate/path/route.js">
import { revalidatePath } from 'next/cache';
import { NextResponse } from 'next/server';

// List of valid paths that can be revalidated
const VALID_PATHS = [
  '/',
  '/admin',
  '/admin/organizations',
  '/admin/donations',
  '/admin/date-donations',
  '/admin/users'
];

export async function POST(request) {
  try {
    // Verify secret
    const { secret, path } = await request.json();
    
    if (!secret || secret !== process.env.REVALIDATE_SECRET) {
      return NextResponse.json(
        { error: 'Invalid secret' },
        { status: 401 }
      );
    }

    if (!path) {
      return NextResponse.json(
        { error: 'Path is required' },
        { status: 400 }
      );
    }

    // Validate path
    if (!VALID_PATHS.includes(path)) {
      return NextResponse.json(
        { error: 'Invalid path' },
        { status: 400 }
      );
    }

    // Revalidate path
    revalidatePath(path);

    return NextResponse.json({
      revalidated: true,
      path,
      timestamp: Date.now()
    });

  } catch (error) {
    console.error('Revalidation error:', error);
    return NextResponse.json(
      { error: 'Failed to revalidate path' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/revalidate/tag/route.js">
import { revalidateTag } from 'next/cache';
import { NextResponse } from 'next/server';

// List of valid tags that can be revalidated
const VALID_TAGS = [
  'organizations',
  'donations',
  'datedonations',
  'users'
];

export async function POST(request) {
  try {
    // Verify secret
    const { secret, tag } = await request.json();
    
    if (!secret || secret !== process.env.REVALIDATE_SECRET) {
      return NextResponse.json(
        { error: 'Invalid secret' },
        { status: 401 }
      );
    }

    if (!tag) {
      return NextResponse.json(
        { error: 'Tag is required' },
        { status: 400 }
      );
    }

    // Validate tag
    if (!VALID_TAGS.includes(tag)) {
      return NextResponse.json(
        { error: 'Invalid tag' },
        { status: 400 }
      );
    }

    // Revalidate tag
    revalidateTag(tag);

    return NextResponse.json({
      revalidated: true,
      tag,
      timestamp: Date.now()
    });

  } catch (error) {
    console.error('Revalidation error:', error);
    return NextResponse.json(
      { error: 'Failed to revalidate tag' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/upload/blob/route.js">
import { put } from '@vercel/blob';
import { NextResponse } from 'next/server';

export async function POST(request) {
  try {
    const { searchParams } = new URL(request.url);
    const filename = searchParams.get('filename');
    
    if (!process.env.BLOB_READ_WRITE_TOKEN) {
      console.error('BLOB_READ_WRITE_TOKEN is not configured');
      return NextResponse.json(
        { error: 'Server configuration error' },
        { status: 500 }
      );
    }

    const file = await request.blob();

    // Validate file type
    if (!file.type.startsWith('image/')) {
      return NextResponse.json(
        { error: 'Invalid file type. Only images are allowed' },
        { status: 400 }
      );
    }

    // Validate file size (500KB limit)
    if (file.size > 500 * 1024) {
      return NextResponse.json(
        { error: 'File size exceeds 500KB limit' },
        { status: 400 }
      );
    }

    try {
      const blob = await put(filename, file, {
        access: 'public',
        token: process.env.BLOB_READ_WRITE_TOKEN,
        addRandomSuffix: true,
      });

      if (!blob || !blob.url) {
        throw new Error('Failed to get image URL');
      }

      return NextResponse.json(blob);
    } catch (uploadError) {
      console.error('Blob upload error:', uploadError);
      return NextResponse.json(
        { error: 'Failed to upload image to server' },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Upload error details:', error);
    return NextResponse.json(
      { error: 'File upload error: ' + (error.message || 'Unknown error') },
      { status: error.status || 500 }
    );
  }
}

export const runtime = 'edge';
</file>

<file path="app/api/upload/route.js">
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { NextResponse } from 'next/server';
import { v4 as uuidv4 } from 'uuid';

const s3 = new S3Client({
  region: 'me-south-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

export async function POST(request) {
  try {
    const formData = await request.formData();
    const files = formData.getAll('files');

    const uploadPromises = files.map(async (file) => {
      const bytes = await file.arrayBuffer();
      const buffer = Buffer.from(bytes);
      
      // Generate unique filename
      const fileExtension = file.name.split('.').pop();
      const fileName = `${uuidv4()}.${fileExtension}`;

      const command = new PutObjectCommand({
        Bucket: 'farmersdonations2',
        Key: `donations/${fileName}`,
        Body: buffer,
        ContentType: file.type,
      });

      await s3.send(command);

      return `https://farmersdonations2.s3.me-south-1.amazonaws.com/donations/${fileName}`;
    });

    const imageUrls = await Promise.all(uploadPromises);

    return NextResponse.json({ imageUrls });
    
  } catch (error) {
    console.error('Error uploading to S3:', error);
    return NextResponse.json(
      { error: 'Failed to upload images' },
      { status: 500 }
    );
  }
}

export const runtime = 'edge';
</file>

<file path="app/farmers/_components/DateDonationForm.js">
'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiX, FiCamera } from 'react-icons/fi';
import Image from 'next/image';
import { createDateDonation } from '@/app/actions/dateDonations';
import { toast } from 'react-hot-toast';

const validatePhoneNumber = (phone) => {
  const phoneRegex = /^05\d{8}$/;
  return phoneRegex.test(phone);
};

const formatPhoneNumber = (value) => {
  // Remove any non-digit characters
  const numbers = value.replace(/\D/g, '');
  
  // Ensure it starts with 05
  if (numbers.length === 0) return '';
  if (numbers.length === 1 && numbers[0] !== '0') return '0';
  if (numbers.length === 2 && numbers[0] === '0' && numbers[1] !== '5') return '05';
  
  // Format the rest of the number
  if (numbers.length <= 2) return numbers;
  return numbers.slice(0, 10);
};

export default function DateDonationForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [formData, setFormData] = useState({
    donationType: '',
    donorName: '',
    quantity: '',
    phoneNumber: '',
  });
  
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [images, setImages] = useState([]);
  const [previewUrls, setPreviewUrls] = useState([]);

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.donationType) {
      newErrors.donationType = 'Please select donation type';
    }
    
    if (!formData.quantity || formData.quantity <= 0) {
      newErrors.quantity = 'Please enter a valid quantity';
    }
    
    if (!formData.phoneNumber || !/^05\d{8}$/.test(formData.phoneNumber)) {
      newErrors.phoneNumber = 'Please enter a valid mobile number';
    }
    
    if (images.length === 0) {
      newErrors.images = 'Please add at least one image';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const maxSize = 5 * 1024 * 1024; // 5MB
    
    const validFiles = files.filter(file => {
      if (file.size > maxSize) {
        toast.error(`File ${file.name} is too large. Maximum size is 5MB`);
        return false;
      }
      return true;
    });

    if (validFiles.length + images.length > 4) {
      toast.error('You can upload up to 4 images');
      return;
    }

    setImages(prev => [...prev, ...validFiles]);
    
    // Create preview URLs
    validFiles.forEach(file => {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrls(prev => [...prev, reader.result]);
      };
      reader.readAsDataURL(file);
    });
  };

  const removeImage = (index) => {
    setImages(prev => prev.filter((_, i) => i !== index));
    setPreviewUrls(prev => prev.filter((_, i) => i !== index));
  };

  const resetForm = () => {
    setFormData({
      donationType: '',
      donorName: '',
      quantity: '',
      phoneNumber: '',
    });
    setImages([]);
    setPreviewUrls([]);
    setTouched({});
    setShowSuccess(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setTouched({
      donationType: true,
      quantity: true,
      phoneNumber: true,
      images: true
    });

    if (!validateForm()) {
      return;
    }

    try {
      setIsSubmitting(true);
      
      // Create FormData for image upload
      const imageFormData = new FormData();
      images.forEach((image) => {
        imageFormData.append('files', image);
      });

      // Upload images to S3
      const uploadResponse = await fetch('/api/upload', {
        method: 'POST',
        body: imageFormData,
      });

      if (!uploadResponse.ok) {
        throw new Error('Failed to upload images');
      }

      const { imageUrls } = await uploadResponse.json();

      // Create donation with image URLs
      await createDateDonation({
        ...formData,
        donorName: formData.donorName.trim() || 'Anonymous',
        images: imageUrls,
      });

      setShowSuccess(true);
      
      // Reset form after 3 seconds
      setTimeout(() => {
        resetForm();
      }, 3000);
      
    } catch (error) {
      console.error('Error submitting form:', error);
      toast.error('An error occurred while submitting the donation');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      <AnimatePresence mode="wait">
        {showSuccess ? (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white rounded-lg shadow-lg p-8 text-center space-y-4"
          >
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.2 }}
              className="w-20 h-20 mx-auto bg-green-100 rounded-full flex items-center justify-center"
            >
              <svg className="w-10 h-10 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
              </svg>
            </motion.div>
            <h2 className="text-2xl font-bold text-gray-800">Donation Received Successfully</h2>
            <p className="text-gray-600">Thank you for your donation</p>
          </motion.div>
        ) : (
          <motion.form 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.5 }}
            onSubmit={handleSubmit} 
            className="bg-white rounded-lg shadow-lg p-4 sm:p-6 space-y-6"
          >
            {/* Logo and Title */}
            <div className="text-center space-y-4">
              <div className="relative w-full h-20 sm:h-24">
                <Image
                  src="/logoLong.png"
                  alt="Khair Dates Society"
                  fill
                  priority
                  className="object-contain"
                />
              </div>
              <div>
                <h1 className="text-xl sm:text-2xl font-bold text-[#998966]">Received Dates</h1>
                <p className="text-gray-600">For Year 2024</p>
              </div>
            </div>

            {/* Donation Type */}
            <div className="space-y-2">
              <label className="block text-lg font-medium text-gray-700">Donation Type</label>
              <div className="grid grid-cols-3 gap-3">
                {['Zakat', 'Sadaqah', 'Gift'].map((type) => (
                  <motion.button
                    key={type}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    type="button"
                    onClick={() => setFormData(prev => ({ ...prev, donationType: type }))}
                    className={`p-3 rounded-lg border-2 transition-colors ${
                      formData.donationType === type 
                        ? 'border-[#998966] bg-[#998966] text-white'
                        : 'border-gray-200 hover:border-[#998966]'
                    }`}
                  >
                    {type}
                  </motion.button>
                ))}
              </div>
              {errors.donationType && touched.donationType && (
                <p className="text-red-500 text-sm">{errors.donationType}</p>
              )}
            </div>

            {/* Donor Name */}
            <div className="space-y-2">
              <label className="block text-lg font-medium text-gray-700">
                Donor Name (Optional)
              </label>
              <input
                type="text"
                value={formData.donorName}
                onChange={(e) => setFormData(prev => ({ 
                  ...prev, 
                  donorName: e.target.value 
                }))}
                placeholder="Will be recorded as Anonymous if left empty"
                className="w-full p-3 rounded-lg border-2 border-gray-200 focus:border-[#998966] outline-none"
              />
            </div>

            {/* Quantity */}
            <div className="space-y-2">
              <label className="block text-lg font-medium text-gray-700">
                Quantity (KG)
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.quantity}
                onChange={(e) => setFormData(prev => ({ 
                  ...prev, 
                  quantity: e.target.value 
                }))}
                className="w-full p-3 rounded-lg border-2 border-gray-200 focus:border-[#998966] outline-none"
                placeholder="0.00"
              />
              {errors.quantity && touched.quantity && (
                <p className="text-red-500 text-sm">{errors.quantity}</p>
              )}
            </div>

            {/* Phone Number */}
            <div className="space-y-2">
              <label className="block text-lg font-medium text-gray-700">
                Mobile Number
              </label>
              <div className="relative">
                <input
                  type="tel"
                  value={formData.phoneNumber}
                  onChange={(e) => setFormData(prev => ({ 
                    ...prev, 
                    phoneNumber: formatPhoneNumber(e.target.value) 
                  }))}
                  onBlur={() => setTouched(prev => ({ ...prev, phoneNumber: true }))}
                  className={`w-full p-3 rounded-lg border-2 ${
                    touched.phoneNumber && !validatePhoneNumber(formData.phoneNumber)
                      ? 'border-red-500 focus:border-red-500'
                      : 'border-gray-200 focus:border-[#998966]'
                  } outline-none`}
                  placeholder="05xxxxxxxx"
                  maxLength="10"
                  dir="ltr"
                />
                {formData.phoneNumber && (
                  <span className="absolute right-3 top-1/2 -translate-y-1/2 text-sm">
                    {validatePhoneNumber(formData.phoneNumber) ? (
                      <span className="text-green-600">✓ Valid number</span>
                    ) : (
                      <span className="text-gray-500">
                        {10 - formData.phoneNumber.length} digits remaining
                      </span>
                    )}
                  </span>
                )}
              </div>
              {touched.phoneNumber && !validatePhoneNumber(formData.phoneNumber) && (
                <p className="text-sm text-red-500">
                  Mobile number must start with 05 and be 10 digits long
                </p>
              )}
            </div>

            {/* Image Upload */}
            <div className="space-y-2">
              <label className="block text-lg font-medium text-gray-700">Images</label>
              <div className="grid grid-cols-3 md:grid-cols-4 gap-3">
                {/* Image Preview */}
                {previewUrls.map((url, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="relative aspect-square rounded-lg overflow-hidden border-2 border-gray-200"
                  >
                    <Image
                      src={url}
                      alt={`Preview ${index + 1}`}
                      fill
                      className="object-cover"
                    />
                    <button
                      type="button"
                      onClick={() => removeImage(index)}
                      className="absolute top-2 right-2 p-1.5 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                    >
                      <FiX className="w-4 h-4" />
                    </button>
                  </motion.div>
                ))}
                
                {/* Upload Button */}
                {previewUrls.length < 4 && (
                  <motion.label
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    className="aspect-square rounded-lg border-2 border-dashed border-gray-300 hover:border-[#998966] cursor-pointer flex flex-col items-center justify-center text-gray-500 hover:text-[#998966] transition-colors"
                  >
                    <FiCamera className="w-6 h-6 mb-1" />
                    <span className="text-xs sm:text-sm text-center px-2">
                      {previewUrls.length === 0 ? 'Add Images' : 'Add More'}
                    </span>
                    <input
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleImageUpload}
                      className="hidden"
                    />
                  </motion.label>
                )}
              </div>
              {errors.images && touched.images && (
                <p className="text-red-500 text-sm">{errors.images}</p>
              )}
              <p className="text-xs text-gray-500 mt-1">
                Upload up to 4 images • Maximum 5MB per image
              </p>
            </div>

            {/* Submit Button */}
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              type="submit"
              disabled={isSubmitting}
              className={`w-full py-4 px-6 rounded-lg bg-[#998966] text-white font-medium transition-opacity ${
                isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'
              }`}
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center space-x-2">
                  <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                    <circle 
                      className="opacity-25" 
                      cx="12" 
                      cy="12" 
                      r="10" 
                      stroke="currentColor" 
                      strokeWidth="4" 
                      fill="none" 
                    />
                    <path 
                      className="opacity-75" 
                      fill="currentColor" 
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z" 
                    />
                  </svg>
                  <span>Submitting...</span>
                </div>
              ) : (
                'Submit'
              )}
            </motion.button>
          </motion.form>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="app/farmers/page.js">
import { Suspense } from 'react';
import DateDonationForm from './_components/DateDonationForm';

export const metadata = {
  title: 'Date Receiving - Charity Organization',
  description: 'Date receiving form for the charity organization',
};

export default function FarmersPage() {
  return (
    <div className="min-h-screen bg-[#f8f7f8] py-12 px-4" dir="ltr">
      <Suspense fallback={
        <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg p-6 animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/2 mx-auto mb-4"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-12 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      }>
        <DateDonationForm />
      </Suspense>
    </div>
  );
}
</file>

<file path="app/forgot-password/page.js">
'use client';

import { useState } from 'react';
import { forgotPassword } from '../actions/auth';
import Link from 'next/link';

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setMessage('');
    setError('');

    try {
      await forgotPassword(email);
      setMessage('Password reset link has been sent to your email');
      setEmail('');
    } catch (error) {
      setError(error.message || 'Error sending reset link');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#f8f7f8]">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md" dir="ltr">
        <h2 className="text-2xl font-semibold mb-6 text-[#998966]">Forgot Password</h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
              required
            />
          </div>

          {message && (
            <div className="p-3 bg-green-50 text-green-800 rounded-lg">
              {message}
            </div>
          )}

          {error && (
            <div className="p-3 bg-red-50 text-red-800 rounded-lg">
              {error}
            </div>
          )}

          <button
            type="submit"
            className={`w-full bg-[#998966] text-white px-6 py-2 rounded-lg transition-opacity ${
              isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'
            }`}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Sending...' : 'Send Reset Link'}
          </button>

          <div className="text-center mt-4">
            <Link 
              href="/login"
              className="text-[#998966] hover:underline"
            >
              Back to Login
            </Link>
          </div>
        </form>
      </div>
    </div>
  );
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;



.modal-enter {
  opacity: 0;
  transform: scale(0.9);
}
.modal-enter-active {
  opacity: 1;
  transform: scale(1);
  transition: opacity 200ms, transform 200ms;
}
.modal-exit {
  opacity: 1;
  transform: scale(1);
}
.modal-exit-active {
  opacity: 0;
  transform: scale(0.9);
  transition: opacity 200ms, transform 200ms;
}

@layer utilities {
  .scrollbar-thin {
    scrollbar-width: thin;
  }
  
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
}
</file>

<file path="app/hooks/useBatchDonations.js">
import { useState, useEffect } from 'react';
import { getDonationsByOrg } from '@/app/actions/donations';

export function useBatchDonations(organizationIds) {
  const [donationsMap, setDonationsMap] = useState({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAllDonations = async () => {
      setLoading(true);
      try {
        const promises = organizationIds.map(id => getDonationsByOrg(id));
        const results = await Promise.all(promises);
        
        const newDonationsMap = organizationIds.reduce((acc, id, index) => {
          acc[id] = results[index];
          return acc;
        }, {});
        
        setDonationsMap(newDonationsMap);
      } catch (error) {
        console.error('Error fetching donations:', error);
      } finally {
        setLoading(false);
      }
    };

    if (organizationIds.length > 0) {
      fetchAllDonations();
    }
  }, [organizationIds]);

  return { donationsMap, loading };
}
</file>

<file path="app/layout.js">
import { Cairo } from "next/font/google";
import "./globals.css";

const cairo = Cairo({
  subsets: ["latin"],
  display: "swap",
});

export const metadata = {
  title: "Organization Management",
  description: "Control panel for managing organizations",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={cairo.className}>
      <body>{children}</body>
    </html>
  );
}
</file>

<file path="app/login/page.js">
'use client';

import { useState } from 'react';
import { login } from '../actions/auth';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function LoginPage() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const result = await login(email, password);
      if (result.success) {
        // Small delay to ensure cookie is set
        setTimeout(() => {
          router.push('/admin');
        }, 100);
      }
    } catch (error) {
      console.error('Login error:', error);
      alert('Login failed');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#f8f7f8]">
      <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md" dir="ltr">
        <h2 className="text-2xl font-semibold mb-6 text-[#998966]">Login</h2>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
          <div className="relative">
            <input
              type={showPassword ? 'text' : 'password'}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
              required
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute inset-y-0 left-0 px-3 py-2 text-gray-500 hover:text-gray-700"
            >
              {showPassword ? 'Hide' : 'Show'}
            </button>
          </div>
        </div>
        <button
          type="submit"
          className={`w-full bg-[#998966] text-white px-6 py-2 rounded-lg transition-opacity ${isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'}`}
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Processing...' : 'Login'}
        </button>
        <div className="text-center mt-4">
          <Link 
            prefetch={true}
            href="/forgot-password"
            className="text-[#998966] hover:underline"
          >
            Forgot Password?
          </Link>
        </div>
      </form>
    </div>
  );
}
</file>

<file path="app/page.js">
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    router.replace('/admin');
  }, [router]);

  return null;
}
</file>

<file path="app/reset-password/page.js">
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { resetPassword } from '../actions/auth';

function ResetPasswordForm() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [message, setMessage] = useState('');
  const router = useRouter();
  const searchParams = useSearchParams();
  const token = searchParams.get('token');

  useEffect(() => {
    if (!token) {
      router.replace('/login');
    }
  }, [token, router]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setMessage('');

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    setIsSubmitting(true);

    try {
      await resetPassword(token, password);
      setMessage('Password reset successful');
      setTimeout(() => {
        router.push('/login');
      }, 2000);
    } catch (error) {
      setError(error.message || 'Error resetting password');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!token) return null;

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#f8f7f8]">
      <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-semibold mb-6 text-[#998966]">Reset Password</h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              New Password
            </label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
              required
              minLength={6}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Confirm Password
            </label>
            <input
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
              required
              minLength={6}
            />
          </div>

          {message && (
            <div className="p-3 bg-green-50 text-green-800 rounded-lg">
              {message}
            </div>
          )}

          {error && (
            <div className="p-3 bg-red-50 text-red-800 rounded-lg">
              {error}
            </div>
          )}

          <button
            type="submit"
            className={`w-full bg-[#998966] text-white px-6 py-2 rounded-lg transition-opacity ${
              isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'
            }`}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Submitting...' : 'Reset Password'}
          </button>
        </form>
      </div>
    </div>
  );
}

export default function ResetPasswordPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-[#f8f7f8]">
        <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md text-center">
          Loading...
        </div>
      </div>
    }>
      <ResetPasswordForm />
    </Suspense>
  );
}
</file>

<file path="app/setup-password/page.js">
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { setupPassword } from '../actions/auth';

function SetupPasswordForm() {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isValidToken, setIsValidToken] = useState(false);
  const router = useRouter();
  const searchParams = useSearchParams();
  const token = searchParams.get('token');

  useEffect(() => {
    if (!token) {
      router.push('/login');
    } else {
      setIsValidToken(true);
    }
  }, [token, router]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (password !== confirmPassword) {
      alert('Passwords do not match');
      return;
    }

    setIsSubmitting(true);

    try {
      await setupPassword(token, password);
      alert('Password setup successful');
      router.push('/login');
    } catch (error) {
      console.error('Setup password error:', error);
      alert('An error occurred while setting up the password');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isValidToken) {
    return null; // or a loading spinner
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#f8f7f8]" dir="ltr">
      <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-semibold mb-6 text-[#998966]">Setup Password</h2>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">New Password</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
          <input
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-[#998966] focus:border-[#998966]"
            required
          />
        </div>
        <button
          type="submit"
          className={`w-full bg-[#998966] text-white px-6 py-2 rounded-lg transition-opacity ${isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:opacity-90'}`}
          disabled={isSubmitting}
        >
          {isSubmitting ? 'Processing...' : 'Setup Password'}
        </button>
      </form>
    </div>
  );
}

export default function SetupPasswordPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <SetupPasswordForm />
    </Suspense>
  );
}
</file>

<file path="app/utils/withAuth.js">
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

export default function withAuth(Component) {
  return function AuthenticatedComponent(props) {
    const router = useRouter();
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
      const checkAuth = async () => {
        try {
          const token = document.cookie
            .split('; ')
            .find(row => row.startsWith('token='))
            ?.split('=')[1];

          if (!token) {
            console.log('No token found in cookies');
            setIsLoading(false);
            router.replace('/login');
            return;
          }

          const response = await fetch('/api/auth/validate', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });

          const data = await response.json();
          
          if (!data.valid) {
            console.log('Token validation failed');
            document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
            setIsLoading(false);
            router.replace('/login');
            return;
          }

          console.log('Token validated successfully');
          setIsAuthenticated(true);
          setIsLoading(false);
        } catch (error) {
          console.error('Authentication check failed:', error);
          setIsLoading(false);
          router.replace('/login');
        }
      };

      checkAuth();
    }, [router]);

    if (isLoading) {
      // Instead of showing a loading spinner, pass the loading state to the component
      return <Component {...props} isLoading={true} />;
    }

    if (!isAuthenticated) {
      return null;
    }

    return <Component {...props} isLoading={false} />;
  };
}
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  logging: {
    fetches: {
      fullUrl: true,
      hmrRefreshes: true,
    },
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'ogk5jafeoc6is43h.public.blob.vercel-storage.com',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'farmersdonations2.s3.me-south-1.amazonaws.com',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'farmersdonations.s3.eu-north-1.amazonaws.com',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "carity_d7d7",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.678.0",
    "@aws-sdk/client-s3": "^3.682.0",
    "@aws-sdk/client-ses": "^3.678.0",
    "@aws-sdk/lib-dynamodb": "^3.678.0",
    "@vercel/blob": "^0.25.1",
    "bcryptjs": "^2.4.3",
    "chart.js": "^4.4.5",
    "date-fns": "^4.1.0",
    "exceljs": "^4.4.0",
    "framer-motion": "^11.11.10",
    "jose": "^5.9.6",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "lucide-react": "^0.454.0",
    "next": "14.2.3",
    "react": "^18",
    "react-dom": "^18",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.3.0",
    "recharts": "^2.13.1",
    "sharp": "^0.33.5"
  },
  "devDependencies": {
    "eslint": "^8",
    "eslint-config-next": "14.2.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
</file>

</repository_files>
